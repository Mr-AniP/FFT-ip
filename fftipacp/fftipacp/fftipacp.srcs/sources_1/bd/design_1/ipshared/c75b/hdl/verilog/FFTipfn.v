// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="FFTipfn,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=17,HLS_SYN_FF=1930,HLS_SYN_LUT=3006,HLS_VERSION=2019_1}" *)

module FFTipfn (
        ap_clk,
        ap_rst_n,
        FFTIN_TDATA,
        FFTIN_TVALID,
        FFTIN_TREADY,
        FFTIN_TLAST,
        FFTIN_TKEEP,
        FFTOUT_TDATA,
        FFTOUT_TVALID,
        FFTOUT_TREADY,
        FFTOUT_TLAST,
        FFTOUT_TKEEP
);

parameter    ap_ST_fsm_state1 = 36'd1;
parameter    ap_ST_fsm_state2 = 36'd2;
parameter    ap_ST_fsm_state3 = 36'd4;
parameter    ap_ST_fsm_pp1_stage0 = 36'd8;
parameter    ap_ST_fsm_state6 = 36'd16;
parameter    ap_ST_fsm_state7 = 36'd32;
parameter    ap_ST_fsm_state8 = 36'd64;
parameter    ap_ST_fsm_state9 = 36'd128;
parameter    ap_ST_fsm_state10 = 36'd256;
parameter    ap_ST_fsm_state11 = 36'd512;
parameter    ap_ST_fsm_state12 = 36'd1024;
parameter    ap_ST_fsm_state13 = 36'd2048;
parameter    ap_ST_fsm_state14 = 36'd4096;
parameter    ap_ST_fsm_state15 = 36'd8192;
parameter    ap_ST_fsm_state16 = 36'd16384;
parameter    ap_ST_fsm_state17 = 36'd32768;
parameter    ap_ST_fsm_state18 = 36'd65536;
parameter    ap_ST_fsm_state19 = 36'd131072;
parameter    ap_ST_fsm_state20 = 36'd262144;
parameter    ap_ST_fsm_state21 = 36'd524288;
parameter    ap_ST_fsm_state22 = 36'd1048576;
parameter    ap_ST_fsm_state23 = 36'd2097152;
parameter    ap_ST_fsm_state24 = 36'd4194304;
parameter    ap_ST_fsm_state25 = 36'd8388608;
parameter    ap_ST_fsm_state26 = 36'd16777216;
parameter    ap_ST_fsm_state27 = 36'd33554432;
parameter    ap_ST_fsm_state28 = 36'd67108864;
parameter    ap_ST_fsm_state29 = 36'd134217728;
parameter    ap_ST_fsm_state30 = 36'd268435456;
parameter    ap_ST_fsm_state31 = 36'd536870912;
parameter    ap_ST_fsm_state32 = 36'd1073741824;
parameter    ap_ST_fsm_state33 = 36'd2147483648;
parameter    ap_ST_fsm_state34 = 36'd4294967296;
parameter    ap_ST_fsm_state35 = 36'd8589934592;
parameter    ap_ST_fsm_pp2_stage0 = 36'd17179869184;
parameter    ap_ST_fsm_state39 = 36'd34359738368;

input   ap_clk;
input   ap_rst_n;
input  [63:0] FFTIN_TDATA;
input   FFTIN_TVALID;
output   FFTIN_TREADY;
input  [0:0] FFTIN_TLAST;
input  [7:0] FFTIN_TKEEP;
output  [63:0] FFTOUT_TDATA;
output   FFTOUT_TVALID;
input   FFTOUT_TREADY;
output  [0:0] FFTOUT_TLAST;
output  [7:0] FFTOUT_TKEEP;

 reg    ap_rst_n_inv;
reg   [63:0] FFTIN_V_data_0_data_out;
wire    FFTIN_V_data_0_vld_in;
wire    FFTIN_V_data_0_vld_out;
wire    FFTIN_V_data_0_ack_in;
reg    FFTIN_V_data_0_ack_out;
reg   [63:0] FFTIN_V_data_0_payload_A;
reg   [63:0] FFTIN_V_data_0_payload_B;
reg    FFTIN_V_data_0_sel_rd;
reg    FFTIN_V_data_0_sel_wr;
wire    FFTIN_V_data_0_sel;
wire    FFTIN_V_data_0_load_A;
wire    FFTIN_V_data_0_load_B;
reg   [1:0] FFTIN_V_data_0_state;
wire    FFTIN_V_data_0_state_cmp_full;
wire    FFTIN_V_keep_V_0_vld_in;
reg    FFTIN_V_keep_V_0_ack_out;
reg   [1:0] FFTIN_V_keep_V_0_state;
reg   [63:0] FFTOUT_V_data_1_data_out;
reg    FFTOUT_V_data_1_vld_in;
wire    FFTOUT_V_data_1_vld_out;
wire    FFTOUT_V_data_1_ack_in;
wire    FFTOUT_V_data_1_ack_out;
reg   [63:0] FFTOUT_V_data_1_payload_A;
reg   [63:0] FFTOUT_V_data_1_payload_B;
reg    FFTOUT_V_data_1_sel_rd;
reg    FFTOUT_V_data_1_sel_wr;
wire    FFTOUT_V_data_1_sel;
wire    FFTOUT_V_data_1_load_A;
wire    FFTOUT_V_data_1_load_B;
reg   [1:0] FFTOUT_V_data_1_state;
wire    FFTOUT_V_data_1_state_cmp_full;
reg   [0:0] FFTOUT_V_last_V_1_data_out;
reg    FFTOUT_V_last_V_1_vld_in;
wire    FFTOUT_V_last_V_1_vld_out;
wire    FFTOUT_V_last_V_1_ack_in;
wire    FFTOUT_V_last_V_1_ack_out;
reg   [0:0] FFTOUT_V_last_V_1_payload_A;
reg   [0:0] FFTOUT_V_last_V_1_payload_B;
reg    FFTOUT_V_last_V_1_sel_rd;
reg    FFTOUT_V_last_V_1_sel_wr;
wire    FFTOUT_V_last_V_1_sel;
wire    FFTOUT_V_last_V_1_load_A;
wire    FFTOUT_V_last_V_1_load_B;
reg   [1:0] FFTOUT_V_last_V_1_state;
wire    FFTOUT_V_last_V_1_state_cmp_full;
wire   [7:0] FFTOUT_V_keep_V_1_data_out;
reg    FFTOUT_V_keep_V_1_vld_in;
wire    FFTOUT_V_keep_V_1_vld_out;
wire    FFTOUT_V_keep_V_1_ack_out;
reg    FFTOUT_V_keep_V_1_sel_rd;
wire    FFTOUT_V_keep_V_1_sel;
reg   [1:0] FFTOUT_V_keep_V_1_state;
wire   [8:0] W_real_address0;
reg    W_real_ce0;
wire   [31:0] W_real_q0;
wire   [8:0] W_imag_address0;
reg    W_imag_ce0;
wire   [31:0] W_imag_q0;
reg    FFTIN_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [35:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln20_fu_391_p2;
reg    FFTOUT_TDATA_blk_n;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln58_reg_787;
reg    ap_enable_reg_pp2_iter2;
reg   [0:0] icmp_ln58_reg_787_pp2_iter1_reg;
reg   [10:0] i_1_reg_287;
reg   [10:0] i_3_reg_330;
wire   [31:0] tempout_R_q0;
reg   [31:0] reg_365;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state29;
wire   [31:0] tempout_I_q0;
reg   [31:0] reg_372;
wire   [31:0] grp_fu_341_p2;
reg   [31:0] reg_379;
wire    ap_CS_fsm_state34;
wire   [31:0] grp_fu_345_p2;
reg   [31:0] reg_385;
wire   [10:0] i_fu_397_p2;
reg    ap_block_state2;
wire   [0:0] icmp_ln29_fu_437_p2;
reg   [0:0] icmp_ln29_reg_636;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state4_pp1_stage0_iter0;
wire    ap_block_state5_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [10:0] i_4_fu_443_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [9:0] or_ln31_8_fu_455_p4;
reg   [9:0] or_ln31_8_reg_650;
wire   [0:0] icmp_ln38_fu_474_p2;
wire    ap_CS_fsm_state7;
wire   [31:0] zext_ln40_fu_486_p1;
reg   [31:0] zext_ln40_reg_664;
wire   [9:0] lshr_ln_fu_490_p4;
reg   [9:0] lshr_ln_reg_669;
wire   [31:0] BFWidth_fu_500_p1;
reg   [31:0] BFWidth_reg_674;
wire   [20:0] zext_ln42_fu_510_p1;
reg   [20:0] zext_ln42_reg_679;
wire   [31:0] zext_ln42_1_fu_514_p1;
reg   [31:0] zext_ln42_1_reg_684;
wire    ap_CS_fsm_state8;
wire   [9:0] j_fu_527_p2;
reg   [9:0] j_reg_692;
wire   [20:0] mul_ln43_fu_623_p2;
reg   [20:0] mul_ln43_reg_697;
wire   [0:0] icmp_ln42_fu_522_p2;
wire   [3:0] stage_fu_533_p2;
wire    ap_CS_fsm_state9;
reg   [31:0] BFWeight_cos_reg_717;
wire    ap_CS_fsm_state10;
reg   [31:0] BFWeight_sin_reg_723;
reg   [9:0] tempout_R_addr_2_reg_732;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln45_fu_554_p2;
reg   [9:0] tempout_I_addr_2_reg_737;
reg   [9:0] tempout_R_addr_3_reg_742;
reg   [9:0] tempout_I_addr_3_reg_747;
wire   [31:0] i_7_fu_577_p2;
reg   [31:0] i_7_reg_752;
wire   [31:0] grp_fu_349_p2;
reg   [31:0] tmp_1_reg_757;
wire    ap_CS_fsm_state16;
wire   [31:0] grp_fu_353_p2;
reg   [31:0] tmp_2_reg_762;
wire   [31:0] grp_fu_357_p2;
reg   [31:0] tmp_3_reg_767;
wire   [31:0] grp_fu_361_p2;
reg   [31:0] tmp_4_reg_772;
reg   [31:0] tmp_5_reg_777;
wire    ap_CS_fsm_state26;
reg   [31:0] tmp_6_reg_782;
wire   [0:0] icmp_ln58_fu_582_p2;
wire    ap_block_state36_pp2_stage0_iter0;
wire    ap_block_state37_pp2_stage0_iter1;
reg    ap_block_state37_io;
wire    ap_block_state38_pp2_stage0_iter2;
reg    ap_block_state38_io;
reg    ap_block_pp2_stage0_11001;
wire   [10:0] i_5_fu_588_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] tmp_last_V_fu_600_p2;
reg   [0:0] tmp_last_V_reg_806;
wire   [63:0] tmp_data_1_fu_614_p3;
wire    ap_CS_fsm_state3;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state4;
reg    ap_enable_reg_pp1_iter1;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state36;
reg   [9:0] tempout_R_address0;
reg    tempout_R_ce0;
reg    tempout_R_we0;
reg   [31:0] tempout_R_d0;
reg   [9:0] tempout_I_address0;
reg    tempout_I_ce0;
reg    tempout_I_we0;
reg   [31:0] tempout_I_d0;
reg   [9:0] FFTIn_R_address0;
reg    FFTIn_R_ce0;
reg    FFTIn_R_we0;
wire   [31:0] FFTIn_R_d0;
wire   [31:0] FFTIn_R_q0;
reg   [9:0] FFTIn_I_address0;
reg    FFTIn_I_ce0;
reg    FFTIn_I_we0;
wire   [31:0] FFTIn_I_d0;
wire   [31:0] FFTIn_I_q0;
reg   [10:0] i_0_reg_276;
wire    ap_CS_fsm_state1;
reg   [3:0] stage_0_reg_298;
wire    ap_CS_fsm_state6;
reg   [9:0] i_6_reg_310;
reg  signed [31:0] i_2_reg_321;
wire    ap_CS_fsm_state35;
wire   [63:0] zext_ln24_fu_431_p1;
wire   [63:0] zext_ln31_fu_449_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln31_1_fu_465_p1;
wire   [63:0] zext_ln43_fu_539_p1;
wire  signed [63:0] sext_ln47_fu_565_p1;
wire  signed [63:0] sext_ln50_fu_571_p1;
wire   [63:0] zext_ln60_fu_594_p1;
wire    ap_block_pp2_stage0_01001;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
reg   [31:0] grp_fu_341_p0;
reg   [31:0] grp_fu_341_p1;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state30;
reg   [31:0] grp_fu_345_p0;
reg   [31:0] grp_fu_345_p1;
wire    ap_CS_fsm_state13;
wire   [31:0] trunc_ln7_fu_407_p1;
wire   [31:0] tmp_data_M_imag_loa_fu_416_p4;
wire   [10:0] zext_ln38_fu_470_p1;
wire   [10:0] subDFTSize_fu_480_p2;
wire   [10:0] lshr_ln43_fu_504_p2;
wire   [21:0] tmp_10_fu_544_p4;
wire   [31:0] i_lower_fu_560_p2;
wire   [31:0] bitcast_ln162_1_fu_610_p1;
wire   [31:0] bitcast_ln162_fu_606_p1;
wire   [10:0] mul_ln43_fu_623_p0;
wire   [9:0] mul_ln43_fu_623_p1;
reg   [1:0] grp_fu_341_opcode;
reg   [1:0] grp_fu_345_opcode;
reg   [35:0] ap_NS_fsm;
wire    ap_CS_fsm_state39;
reg    ap_block_state39;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [20:0] mul_ln43_fu_623_p10;

// power-on initialization
initial begin
#0 FFTIN_V_data_0_sel_rd = 1'b0;
#0 FFTIN_V_data_0_sel_wr = 1'b0;
#0 FFTIN_V_data_0_state = 2'd0;
#0 FFTIN_V_keep_V_0_state = 2'd0;
#0 FFTOUT_V_data_1_sel_rd = 1'b0;
#0 FFTOUT_V_data_1_sel_wr = 1'b0;
#0 FFTOUT_V_data_1_state = 2'd0;
#0 FFTOUT_V_last_V_1_sel_rd = 1'b0;
#0 FFTOUT_V_last_V_1_sel_wr = 1'b0;
#0 FFTOUT_V_last_V_1_state = 2'd0;
#0 FFTOUT_V_keep_V_1_sel_rd = 1'b0;
#0 FFTOUT_V_keep_V_1_state = 2'd0;
#0 ap_CS_fsm = 36'd1;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

FFTipfn_W_real #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
W_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(W_real_address0),
    .ce0(W_real_ce0),
    .q0(W_real_q0)
);

FFTipfn_W_imag #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
W_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(W_imag_address0),
    .ce0(W_imag_ce0),
    .q0(W_imag_q0)
);

FFTipfn_tempout_R #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
tempout_R_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(tempout_R_address0),
    .ce0(tempout_R_ce0),
    .we0(tempout_R_we0),
    .d0(tempout_R_d0),
    .q0(tempout_R_q0)
);

FFTipfn_tempout_R #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
tempout_I_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(tempout_I_address0),
    .ce0(tempout_I_ce0),
    .we0(tempout_I_we0),
    .d0(tempout_I_d0),
    .q0(tempout_I_q0)
);

FFTipfn_tempout_R #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
FFTIn_R_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(FFTIn_R_address0),
    .ce0(FFTIn_R_ce0),
    .we0(FFTIn_R_we0),
    .d0(FFTIn_R_d0),
    .q0(FFTIn_R_q0)
);

FFTipfn_tempout_R #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
FFTIn_I_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(FFTIn_I_address0),
    .ce0(FFTIn_I_ce0),
    .we0(FFTIn_I_we0),
    .d0(FFTIn_I_d0),
    .q0(FFTIn_I_q0)
);

FFTipfn_faddfsub_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFTipfn_faddfsub_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_341_p0),
    .din1(grp_fu_341_p1),
    .opcode(grp_fu_341_opcode),
    .ce(1'b1),
    .dout(grp_fu_341_p2)
);

FFTipfn_faddfsub_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFTipfn_faddfsub_bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_345_p0),
    .din1(grp_fu_345_p1),
    .opcode(grp_fu_345_opcode),
    .ce(1'b1),
    .dout(grp_fu_345_p2)
);

FFTipfn_fmul_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFTipfn_fmul_32nscud_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_365),
    .din1(BFWeight_cos_reg_717),
    .ce(1'b1),
    .dout(grp_fu_349_p2)
);

FFTipfn_fmul_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFTipfn_fmul_32nscud_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_372),
    .din1(BFWeight_sin_reg_723),
    .ce(1'b1),
    .dout(grp_fu_353_p2)
);

FFTipfn_fmul_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFTipfn_fmul_32nscud_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_372),
    .din1(BFWeight_cos_reg_717),
    .ce(1'b1),
    .dout(grp_fu_357_p2)
);

FFTipfn_fmul_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFTipfn_fmul_32nscud_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_365),
    .din1(BFWeight_sin_reg_723),
    .ce(1'b1),
    .dout(grp_fu_361_p2)
);

FFTipfn_mul_mul_1dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 21 ))
FFTipfn_mul_mul_1dEe_U7(
    .din0(mul_ln43_fu_623_p0),
    .din1(mul_ln43_fu_623_p1),
    .dout(mul_ln43_fu_623_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        FFTIN_V_data_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == FFTIN_V_data_0_ack_out) & (1'b1 == FFTIN_V_data_0_vld_out))) begin
            FFTIN_V_data_0_sel_rd <= ~FFTIN_V_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        FFTIN_V_data_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == FFTIN_V_data_0_ack_in) & (1'b1 == FFTIN_V_data_0_vld_in))) begin
            FFTIN_V_data_0_sel_wr <= ~FFTIN_V_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        FFTIN_V_data_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == FFTIN_V_data_0_state) & (1'b0 == FFTIN_V_data_0_vld_in)) | ((2'd3 == FFTIN_V_data_0_state) & (1'b0 == FFTIN_V_data_0_vld_in) & (1'b1 == FFTIN_V_data_0_ack_out)))) begin
            FFTIN_V_data_0_state <= 2'd2;
        end else if ((((2'd1 == FFTIN_V_data_0_state) & (1'b0 == FFTIN_V_data_0_ack_out)) | ((2'd3 == FFTIN_V_data_0_state) & (1'b0 == FFTIN_V_data_0_ack_out) & (1'b1 == FFTIN_V_data_0_vld_in)))) begin
            FFTIN_V_data_0_state <= 2'd1;
        end else if (((~((1'b0 == FFTIN_V_data_0_vld_in) & (1'b1 == FFTIN_V_data_0_ack_out)) & ~((1'b0 == FFTIN_V_data_0_ack_out) & (1'b1 == FFTIN_V_data_0_vld_in)) & (2'd3 == FFTIN_V_data_0_state)) | ((2'd1 == FFTIN_V_data_0_state) & (1'b1 == FFTIN_V_data_0_ack_out)) | ((2'd2 == FFTIN_V_data_0_state) & (1'b1 == FFTIN_V_data_0_vld_in)))) begin
            FFTIN_V_data_0_state <= 2'd3;
        end else begin
            FFTIN_V_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        FFTIN_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == FFTIN_V_keep_V_0_state) & (1'b0 == FFTIN_V_keep_V_0_vld_in)) | ((2'd3 == FFTIN_V_keep_V_0_state) & (1'b0 == FFTIN_V_keep_V_0_vld_in) & (1'b1 == FFTIN_V_keep_V_0_ack_out)))) begin
            FFTIN_V_keep_V_0_state <= 2'd2;
        end else if ((((2'd1 == FFTIN_V_keep_V_0_state) & (1'b0 == FFTIN_V_keep_V_0_ack_out)) | ((2'd3 == FFTIN_V_keep_V_0_state) & (1'b0 == FFTIN_V_keep_V_0_ack_out) & (1'b1 == FFTIN_V_keep_V_0_vld_in)))) begin
            FFTIN_V_keep_V_0_state <= 2'd1;
        end else if (((~((1'b0 == FFTIN_V_keep_V_0_vld_in) & (1'b1 == FFTIN_V_keep_V_0_ack_out)) & ~((1'b0 == FFTIN_V_keep_V_0_ack_out) & (1'b1 == FFTIN_V_keep_V_0_vld_in)) & (2'd3 == FFTIN_V_keep_V_0_state)) | ((2'd1 == FFTIN_V_keep_V_0_state) & (1'b1 == FFTIN_V_keep_V_0_ack_out)) | ((2'd2 == FFTIN_V_keep_V_0_state) & (1'b1 == FFTIN_V_keep_V_0_vld_in)))) begin
            FFTIN_V_keep_V_0_state <= 2'd3;
        end else begin
            FFTIN_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        FFTOUT_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == FFTOUT_V_data_1_ack_out) & (1'b1 == FFTOUT_V_data_1_vld_out))) begin
            FFTOUT_V_data_1_sel_rd <= ~FFTOUT_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        FFTOUT_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == FFTOUT_V_data_1_ack_in) & (1'b1 == FFTOUT_V_data_1_vld_in))) begin
            FFTOUT_V_data_1_sel_wr <= ~FFTOUT_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        FFTOUT_V_data_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == FFTOUT_V_data_1_state) & (1'b0 == FFTOUT_V_data_1_vld_in)) | ((2'd3 == FFTOUT_V_data_1_state) & (1'b0 == FFTOUT_V_data_1_vld_in) & (1'b1 == FFTOUT_V_data_1_ack_out)))) begin
            FFTOUT_V_data_1_state <= 2'd2;
        end else if ((((2'd1 == FFTOUT_V_data_1_state) & (1'b0 == FFTOUT_TREADY)) | ((2'd3 == FFTOUT_V_data_1_state) & (1'b0 == FFTOUT_TREADY) & (1'b1 == FFTOUT_V_data_1_vld_in)))) begin
            FFTOUT_V_data_1_state <= 2'd1;
        end else if (((~((1'b0 == FFTOUT_V_data_1_vld_in) & (1'b1 == FFTOUT_V_data_1_ack_out)) & ~((1'b0 == FFTOUT_TREADY) & (1'b1 == FFTOUT_V_data_1_vld_in)) & (2'd3 == FFTOUT_V_data_1_state)) | ((2'd1 == FFTOUT_V_data_1_state) & (1'b1 == FFTOUT_V_data_1_ack_out)) | ((2'd2 == FFTOUT_V_data_1_state) & (1'b1 == FFTOUT_V_data_1_vld_in)))) begin
            FFTOUT_V_data_1_state <= 2'd3;
        end else begin
            FFTOUT_V_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        FFTOUT_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == FFTOUT_V_keep_V_1_ack_out) & (1'b1 == FFTOUT_V_keep_V_1_vld_out))) begin
            FFTOUT_V_keep_V_1_sel_rd <= ~FFTOUT_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        FFTOUT_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == FFTOUT_V_keep_V_1_state) & (1'b0 == FFTOUT_V_keep_V_1_vld_in)) | ((2'd3 == FFTOUT_V_keep_V_1_state) & (1'b0 == FFTOUT_V_keep_V_1_vld_in) & (1'b1 == FFTOUT_V_keep_V_1_ack_out)))) begin
            FFTOUT_V_keep_V_1_state <= 2'd2;
        end else if ((((2'd1 == FFTOUT_V_keep_V_1_state) & (1'b0 == FFTOUT_TREADY)) | ((2'd3 == FFTOUT_V_keep_V_1_state) & (1'b0 == FFTOUT_TREADY) & (1'b1 == FFTOUT_V_keep_V_1_vld_in)))) begin
            FFTOUT_V_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == FFTOUT_V_keep_V_1_vld_in) & (1'b1 == FFTOUT_V_keep_V_1_ack_out)) & ~((1'b0 == FFTOUT_TREADY) & (1'b1 == FFTOUT_V_keep_V_1_vld_in)) & (2'd3 == FFTOUT_V_keep_V_1_state)) | ((2'd1 == FFTOUT_V_keep_V_1_state) & (1'b1 == FFTOUT_V_keep_V_1_ack_out)) | ((2'd2 == FFTOUT_V_keep_V_1_state) & (1'b1 == FFTOUT_V_keep_V_1_vld_in)))) begin
            FFTOUT_V_keep_V_1_state <= 2'd3;
        end else begin
            FFTOUT_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        FFTOUT_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == FFTOUT_V_last_V_1_ack_out) & (1'b1 == FFTOUT_V_last_V_1_vld_out))) begin
            FFTOUT_V_last_V_1_sel_rd <= ~FFTOUT_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        FFTOUT_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == FFTOUT_V_last_V_1_ack_in) & (1'b1 == FFTOUT_V_last_V_1_vld_in))) begin
            FFTOUT_V_last_V_1_sel_wr <= ~FFTOUT_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        FFTOUT_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == FFTOUT_V_last_V_1_state) & (1'b0 == FFTOUT_V_last_V_1_vld_in)) | ((2'd3 == FFTOUT_V_last_V_1_state) & (1'b0 == FFTOUT_V_last_V_1_vld_in) & (1'b1 == FFTOUT_V_last_V_1_ack_out)))) begin
            FFTOUT_V_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == FFTOUT_V_last_V_1_state) & (1'b0 == FFTOUT_TREADY)) | ((2'd3 == FFTOUT_V_last_V_1_state) & (1'b0 == FFTOUT_TREADY) & (1'b1 == FFTOUT_V_last_V_1_vld_in)))) begin
            FFTOUT_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == FFTOUT_V_last_V_1_vld_in) & (1'b1 == FFTOUT_V_last_V_1_ack_out)) & ~((1'b0 == FFTOUT_TREADY) & (1'b1 == FFTOUT_V_last_V_1_vld_in)) & (2'd3 == FFTOUT_V_last_V_1_state)) | ((2'd1 == FFTOUT_V_last_V_1_state) & (1'b1 == FFTOUT_V_last_V_1_ack_out)) | ((2'd2 == FFTOUT_V_last_V_1_state) & (1'b1 == FFTOUT_V_last_V_1_vld_in)))) begin
            FFTOUT_V_last_V_1_state <= 2'd3;
        end else begin
            FFTOUT_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state4))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state36) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((icmp_ln38_fu_474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state36)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state36);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if (((icmp_ln38_fu_474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln20_fu_391_p2 == 1'd0) & (1'b0 == FFTIN_V_data_0_vld_out)) & (icmp_ln20_fu_391_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_276 <= i_fu_397_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_0_reg_276 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_287 <= 11'd0;
    end else if (((icmp_ln29_fu_437_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_1_reg_287 <= i_4_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        i_2_reg_321 <= i_7_reg_752;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_2_reg_321 <= zext_ln42_1_reg_684;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_3_reg_330 <= 11'd0;
    end else if (((icmp_ln58_fu_582_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_3_reg_330 <= i_5_fu_588_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_554_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        i_6_reg_310 <= j_reg_692;
    end else if (((icmp_ln38_fu_474_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        i_6_reg_310 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        stage_0_reg_298 <= 4'd1;
    end else if (((icmp_ln42_fu_522_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        stage_0_reg_298 <= stage_fu_533_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        BFWeight_cos_reg_717 <= W_real_q0;
        BFWeight_sin_reg_723 <= W_imag_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_474_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        BFWidth_reg_674[9 : 0] <= BFWidth_fu_500_p1[9 : 0];
        lshr_ln_reg_669 <= {{subDFTSize_fu_480_p2[10:1]}};
        zext_ln40_reg_664[10 : 0] <= zext_ln40_fu_486_p1[10 : 0];
        zext_ln42_reg_679[10 : 0] <= zext_ln42_fu_510_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == FFTIN_V_data_0_load_A)) begin
        FFTIN_V_data_0_payload_A <= FFTIN_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == FFTIN_V_data_0_load_B)) begin
        FFTIN_V_data_0_payload_B <= FFTIN_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == FFTOUT_V_data_1_load_A)) begin
        FFTOUT_V_data_1_payload_A <= tmp_data_1_fu_614_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == FFTOUT_V_data_1_load_B)) begin
        FFTOUT_V_data_1_payload_B <= tmp_data_1_fu_614_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == FFTOUT_V_last_V_1_load_A)) begin
        FFTOUT_V_last_V_1_payload_A <= tmp_last_V_reg_806;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == FFTOUT_V_last_V_1_load_B)) begin
        FFTOUT_V_last_V_1_payload_B <= tmp_last_V_reg_806;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_554_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        i_7_reg_752 <= i_7_fu_577_p2;
        tempout_I_addr_2_reg_737 <= sext_ln47_fu_565_p1;
        tempout_I_addr_3_reg_747 <= sext_ln50_fu_571_p1;
        tempout_R_addr_2_reg_732 <= sext_ln47_fu_565_p1;
        tempout_R_addr_3_reg_742 <= sext_ln50_fu_571_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln29_reg_636 <= icmp_ln29_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln58_reg_787 <= icmp_ln58_fu_582_p2;
        icmp_ln58_reg_787_pp2_iter1_reg <= icmp_ln58_reg_787;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_reg_692 <= j_fu_527_p2;
        zext_ln42_1_reg_684[9 : 0] <= zext_ln42_1_fu_514_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_522_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        mul_ln43_reg_697 <= mul_ln43_fu_623_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_437_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        or_ln31_8_reg_650 <= or_ln31_8_fu_455_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_365 <= tempout_R_q0;
        reg_372 <= tempout_I_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state21))) begin
        reg_379 <= grp_fu_341_p2;
        reg_385 <= grp_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_1_reg_757 <= grp_fu_349_p2;
        tmp_2_reg_762 <= grp_fu_353_p2;
        tmp_3_reg_767 <= grp_fu_357_p2;
        tmp_4_reg_772 <= grp_fu_361_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_5_reg_777 <= grp_fu_341_p2;
        tmp_6_reg_782 <= grp_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_582_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tmp_last_V_reg_806 <= tmp_last_V_fu_600_p2;
    end
end

always @ (*) begin
    if (((icmp_ln20_fu_391_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        FFTIN_TDATA_blk_n = FFTIN_V_data_0_state[1'd0];
    end else begin
        FFTIN_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln20_fu_391_p2 == 1'd0) & (1'b0 == FFTIN_V_data_0_vld_out)) & (icmp_ln20_fu_391_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        FFTIN_V_data_0_ack_out = 1'b1;
    end else begin
        FFTIN_V_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == FFTIN_V_data_0_sel)) begin
        FFTIN_V_data_0_data_out = FFTIN_V_data_0_payload_B;
    end else begin
        FFTIN_V_data_0_data_out = FFTIN_V_data_0_payload_A;
    end
end

always @ (*) begin
    if ((~((icmp_ln20_fu_391_p2 == 1'd0) & (1'b0 == FFTIN_V_data_0_vld_out)) & (icmp_ln20_fu_391_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        FFTIN_V_keep_V_0_ack_out = 1'b1;
    end else begin
        FFTIN_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        FFTIn_I_address0 = zext_ln31_fu_449_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        FFTIn_I_address0 = zext_ln24_fu_431_p1;
    end else begin
        FFTIn_I_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((icmp_ln20_fu_391_p2 == 1'd0) & (1'b0 == FFTIN_V_data_0_vld_out)) & (1'b1 == ap_CS_fsm_state2)))) begin
        FFTIn_I_ce0 = 1'b1;
    end else begin
        FFTIn_I_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln20_fu_391_p2 == 1'd0) & (1'b0 == FFTIN_V_data_0_vld_out)) & (icmp_ln20_fu_391_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        FFTIn_I_we0 = 1'b1;
    end else begin
        FFTIn_I_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        FFTIn_R_address0 = zext_ln31_fu_449_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        FFTIn_R_address0 = zext_ln24_fu_431_p1;
    end else begin
        FFTIn_R_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | (~((icmp_ln20_fu_391_p2 == 1'd0) & (1'b0 == FFTIN_V_data_0_vld_out)) & (1'b1 == ap_CS_fsm_state2)))) begin
        FFTIn_R_ce0 = 1'b1;
    end else begin
        FFTIn_R_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln20_fu_391_p2 == 1'd0) & (1'b0 == FFTIN_V_data_0_vld_out)) & (icmp_ln20_fu_391_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        FFTIn_R_we0 = 1'b1;
    end else begin
        FFTIn_R_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln58_reg_787_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((icmp_ln58_reg_787 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        FFTOUT_TDATA_blk_n = FFTOUT_V_data_1_state[1'd1];
    end else begin
        FFTOUT_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == FFTOUT_V_data_1_sel)) begin
        FFTOUT_V_data_1_data_out = FFTOUT_V_data_1_payload_B;
    end else begin
        FFTOUT_V_data_1_data_out = FFTOUT_V_data_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln58_reg_787 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        FFTOUT_V_data_1_vld_in = 1'b1;
    end else begin
        FFTOUT_V_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln58_reg_787 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        FFTOUT_V_keep_V_1_vld_in = 1'b1;
    end else begin
        FFTOUT_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == FFTOUT_V_last_V_1_sel)) begin
        FFTOUT_V_last_V_1_data_out = FFTOUT_V_last_V_1_payload_B;
    end else begin
        FFTOUT_V_last_V_1_data_out = FFTOUT_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln58_reg_787 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        FFTOUT_V_last_V_1_vld_in = 1'b1;
    end else begin
        FFTOUT_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        W_imag_ce0 = 1'b1;
    end else begin
        W_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        W_real_ce0 = 1'b1;
    end else begin
        W_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln29_fu_437_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln58_fu_582_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state36 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state36 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state17))) begin
        grp_fu_341_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_341_opcode = 2'd0;
    end else begin
        grp_fu_341_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_341_p0 = reg_365;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_341_p0 = tmp_1_reg_757;
    end else begin
        grp_fu_341_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_341_p1 = reg_379;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_341_p1 = tmp_2_reg_762;
    end else begin
        grp_fu_341_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_345_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state17))) begin
        grp_fu_345_opcode = 2'd0;
    end else begin
        grp_fu_345_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_345_p0 = reg_372;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_345_p0 = tmp_3_reg_767;
    end else begin
        grp_fu_345_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_345_p1 = reg_385;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_345_p1 = tmp_4_reg_772;
    end else begin
        grp_fu_345_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tempout_I_address0 = zext_ln60_fu_594_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        tempout_I_address0 = tempout_I_addr_2_reg_737;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state35))) begin
        tempout_I_address0 = tempout_I_addr_3_reg_747;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        tempout_I_address0 = sext_ln47_fu_565_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tempout_I_address0 = zext_ln31_1_fu_465_p1;
    end else begin
        tempout_I_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state11) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        tempout_I_ce0 = 1'b1;
    end else begin
        tempout_I_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        tempout_I_d0 = reg_385;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        tempout_I_d0 = tmp_6_reg_782;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tempout_I_d0 = FFTIn_I_q0;
    end else begin
        tempout_I_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state35) | ((icmp_ln29_reg_636 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        tempout_I_we0 = 1'b1;
    end else begin
        tempout_I_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tempout_R_address0 = zext_ln60_fu_594_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        tempout_R_address0 = tempout_R_addr_2_reg_732;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state35))) begin
        tempout_R_address0 = tempout_R_addr_3_reg_742;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        tempout_R_address0 = sext_ln47_fu_565_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tempout_R_address0 = zext_ln31_1_fu_465_p1;
    end else begin
        tempout_R_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state11) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        tempout_R_ce0 = 1'b1;
    end else begin
        tempout_R_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        tempout_R_d0 = reg_379;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        tempout_R_d0 = tmp_5_reg_777;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tempout_R_d0 = FFTIn_R_q0;
    end else begin
        tempout_R_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state35) | ((icmp_ln29_reg_636 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        tempout_R_we0 = 1'b1;
    end else begin
        tempout_R_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln20_fu_391_p2 == 1'd0) & (1'b0 == FFTIN_V_data_0_vld_out)) & (icmp_ln20_fu_391_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln20_fu_391_p2 == 1'd0) & (1'b0 == FFTIN_V_data_0_vld_out)) & (icmp_ln20_fu_391_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln29_fu_437_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln29_fu_437_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln38_fu_474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln42_fu_522_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((icmp_ln45_fu_554_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln58_fu_582_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((icmp_ln58_fu_582_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state39 : begin
            if ((~((2'd1 == FFTOUT_V_keep_V_1_state) | (2'd1 == FFTOUT_V_last_V_1_state) | (2'd1 == FFTOUT_V_data_1_state) | ((2'd3 == FFTOUT_V_keep_V_1_state) & (1'b0 == FFTOUT_TREADY)) | ((2'd3 == FFTOUT_V_last_V_1_state) & (1'b0 == FFTOUT_TREADY)) | ((2'd3 == FFTOUT_V_data_1_state) & (1'b0 == FFTOUT_TREADY))) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign BFWidth_fu_500_p1 = lshr_ln_fu_490_p4;

assign FFTIN_TREADY = FFTIN_V_keep_V_0_state[1'd1];

assign FFTIN_V_data_0_ack_in = FFTIN_V_data_0_state[1'd1];

assign FFTIN_V_data_0_load_A = (~FFTIN_V_data_0_sel_wr & FFTIN_V_data_0_state_cmp_full);

assign FFTIN_V_data_0_load_B = (FFTIN_V_data_0_state_cmp_full & FFTIN_V_data_0_sel_wr);

assign FFTIN_V_data_0_sel = FFTIN_V_data_0_sel_rd;

assign FFTIN_V_data_0_state_cmp_full = ((FFTIN_V_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign FFTIN_V_data_0_vld_in = FFTIN_TVALID;

assign FFTIN_V_data_0_vld_out = FFTIN_V_data_0_state[1'd0];

assign FFTIN_V_keep_V_0_vld_in = FFTIN_TVALID;

assign FFTIn_I_d0 = tmp_data_M_imag_loa_fu_416_p4;

assign FFTIn_R_d0 = trunc_ln7_fu_407_p1;

assign FFTOUT_TDATA = FFTOUT_V_data_1_data_out;

assign FFTOUT_TKEEP = FFTOUT_V_keep_V_1_data_out;

assign FFTOUT_TLAST = FFTOUT_V_last_V_1_data_out;

assign FFTOUT_TVALID = FFTOUT_V_keep_V_1_state[1'd0];

assign FFTOUT_V_data_1_ack_in = FFTOUT_V_data_1_state[1'd1];

assign FFTOUT_V_data_1_ack_out = FFTOUT_TREADY;

assign FFTOUT_V_data_1_load_A = (~FFTOUT_V_data_1_sel_wr & FFTOUT_V_data_1_state_cmp_full);

assign FFTOUT_V_data_1_load_B = (FFTOUT_V_data_1_state_cmp_full & FFTOUT_V_data_1_sel_wr);

assign FFTOUT_V_data_1_sel = FFTOUT_V_data_1_sel_rd;

assign FFTOUT_V_data_1_state_cmp_full = ((FFTOUT_V_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign FFTOUT_V_data_1_vld_out = FFTOUT_V_data_1_state[1'd0];

assign FFTOUT_V_keep_V_1_ack_out = FFTOUT_TREADY;

assign FFTOUT_V_keep_V_1_data_out = 8'd255;

assign FFTOUT_V_keep_V_1_sel = FFTOUT_V_keep_V_1_sel_rd;

assign FFTOUT_V_keep_V_1_vld_out = FFTOUT_V_keep_V_1_state[1'd0];

assign FFTOUT_V_last_V_1_ack_in = FFTOUT_V_last_V_1_state[1'd1];

assign FFTOUT_V_last_V_1_ack_out = FFTOUT_TREADY;

assign FFTOUT_V_last_V_1_load_A = (~FFTOUT_V_last_V_1_sel_wr & FFTOUT_V_last_V_1_state_cmp_full);

assign FFTOUT_V_last_V_1_load_B = (FFTOUT_V_last_V_1_state_cmp_full & FFTOUT_V_last_V_1_sel_wr);

assign FFTOUT_V_last_V_1_sel = FFTOUT_V_last_V_1_sel_rd;

assign FFTOUT_V_last_V_1_state_cmp_full = ((FFTOUT_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign FFTOUT_V_last_V_1_vld_out = FFTOUT_V_last_V_1_state[1'd0];

assign W_imag_address0 = zext_ln43_fu_539_p1;

assign W_real_address0 = zext_ln43_fu_539_p1;

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((1'b1 == ap_block_state38_io) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b1 == ap_block_state37_io) & (ap_enable_reg_pp2_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((1'b1 == ap_block_state38_io) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b1 == ap_block_state37_io) & (ap_enable_reg_pp2_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln20_fu_391_p2 == 1'd0) & (1'b0 == FFTIN_V_data_0_vld_out));
end

assign ap_block_state36_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state37_io = ((icmp_ln58_reg_787 == 1'd0) & (1'b0 == FFTOUT_V_data_1_ack_in));
end

assign ap_block_state37_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state38_io = ((icmp_ln58_reg_787_pp2_iter1_reg == 1'd0) & (1'b0 == FFTOUT_V_data_1_ack_in));
end

assign ap_block_state38_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state39 = ((2'd1 == FFTOUT_V_keep_V_1_state) | (2'd1 == FFTOUT_V_last_V_1_state) | (2'd1 == FFTOUT_V_data_1_state) | ((2'd3 == FFTOUT_V_keep_V_1_state) & (1'b0 == FFTOUT_TREADY)) | ((2'd3 == FFTOUT_V_last_V_1_state) & (1'b0 == FFTOUT_TREADY)) | ((2'd3 == FFTOUT_V_data_1_state) & (1'b0 == FFTOUT_TREADY)));
end

assign ap_block_state4_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln162_1_fu_610_p1 = tempout_I_q0;

assign bitcast_ln162_fu_606_p1 = tempout_R_q0;

assign i_4_fu_443_p2 = (i_1_reg_287 + 11'd1);

assign i_5_fu_588_p2 = (i_3_reg_330 + 11'd1);

assign i_7_fu_577_p2 = ($signed(zext_ln40_reg_664) + $signed(i_2_reg_321));

assign i_fu_397_p2 = (i_0_reg_276 + 11'd1);

assign i_lower_fu_560_p2 = ($signed(i_2_reg_321) + $signed(BFWidth_reg_674));

assign icmp_ln20_fu_391_p2 = ((i_0_reg_276 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_437_p2 = ((i_1_reg_287 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_474_p2 = ((stage_0_reg_298 == 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_522_p2 = ((i_6_reg_310 == lshr_ln_reg_669) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_554_p2 = (($signed(tmp_10_fu_544_p4) < $signed(22'd1)) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_582_p2 = ((i_3_reg_330 == 11'd1024) ? 1'b1 : 1'b0);

assign j_fu_527_p2 = (i_6_reg_310 + 10'd1);

assign lshr_ln43_fu_504_p2 = 11'd1024 >> zext_ln38_fu_470_p1;

assign lshr_ln_fu_490_p4 = {{subDFTSize_fu_480_p2[10:1]}};

assign mul_ln43_fu_623_p0 = zext_ln42_reg_679;

assign mul_ln43_fu_623_p1 = mul_ln43_fu_623_p10;

assign mul_ln43_fu_623_p10 = i_6_reg_310;

integer ap_tvar_int_0;

always @ (i_1_reg_287) begin
    for (ap_tvar_int_0 = 10 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 9 - 0) begin
            or_ln31_8_fu_455_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            or_ln31_8_fu_455_p4[ap_tvar_int_0] = i_1_reg_287[9 - ap_tvar_int_0];
        end
    end
end

assign sext_ln47_fu_565_p1 = $signed(i_lower_fu_560_p2);

assign sext_ln50_fu_571_p1 = i_2_reg_321;

assign stage_fu_533_p2 = (stage_0_reg_298 + 4'd1);

assign subDFTSize_fu_480_p2 = 11'd1 << zext_ln38_fu_470_p1;

assign tmp_10_fu_544_p4 = {{i_2_reg_321[31:10]}};

assign tmp_data_1_fu_614_p3 = {{bitcast_ln162_1_fu_610_p1}, {bitcast_ln162_fu_606_p1}};

assign tmp_data_M_imag_loa_fu_416_p4 = {{FFTIN_V_data_0_data_out[63:32]}};

assign tmp_last_V_fu_600_p2 = ((i_3_reg_330 == 11'd1023) ? 1'b1 : 1'b0);

assign trunc_ln7_fu_407_p1 = FFTIN_V_data_0_data_out[31:0];

assign zext_ln24_fu_431_p1 = i_0_reg_276;

assign zext_ln31_1_fu_465_p1 = or_ln31_8_reg_650;

assign zext_ln31_fu_449_p1 = i_1_reg_287;

assign zext_ln38_fu_470_p1 = stage_0_reg_298;

assign zext_ln40_fu_486_p1 = subDFTSize_fu_480_p2;

assign zext_ln42_1_fu_514_p1 = i_6_reg_310;

assign zext_ln42_fu_510_p1 = lshr_ln43_fu_504_p2;

assign zext_ln43_fu_539_p1 = mul_ln43_reg_697;

assign zext_ln60_fu_594_p1 = i_3_reg_330;

always @ (posedge ap_clk) begin
    zext_ln40_reg_664[31:11] <= 21'b000000000000000000000;
    BFWidth_reg_674[31:10] <= 22'b0000000000000000000000;
    zext_ln42_reg_679[20:11] <= 10'b0000000000;
    zext_ln42_1_reg_684[31:10] <= 22'b0000000000000000000000;
end

endmodule //FFTipfn
