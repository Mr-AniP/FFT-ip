// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "FFTipfn.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic FFTipfn::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic FFTipfn::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<36> FFTipfn::ap_ST_fsm_state1 = "1";
const sc_lv<36> FFTipfn::ap_ST_fsm_state2 = "10";
const sc_lv<36> FFTipfn::ap_ST_fsm_state3 = "100";
const sc_lv<36> FFTipfn::ap_ST_fsm_pp1_stage0 = "1000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state6 = "10000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state7 = "100000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state8 = "1000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state9 = "10000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state10 = "100000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state11 = "1000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state12 = "10000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state13 = "100000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state14 = "1000000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state15 = "10000000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state16 = "100000000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state17 = "1000000000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state18 = "10000000000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state19 = "100000000000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state20 = "1000000000000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state21 = "10000000000000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state22 = "100000000000000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state23 = "1000000000000000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state24 = "10000000000000000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state25 = "100000000000000000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state26 = "1000000000000000000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state27 = "10000000000000000000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state28 = "100000000000000000000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state29 = "1000000000000000000000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state30 = "10000000000000000000000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state31 = "100000000000000000000000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state32 = "1000000000000000000000000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state33 = "10000000000000000000000000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state34 = "100000000000000000000000000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state35 = "1000000000000000000000000000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_pp2_stage0 = "10000000000000000000000000000000000";
const sc_lv<36> FFTipfn::ap_ST_fsm_state39 = "100000000000000000000000000000000000";
const bool FFTipfn::ap_const_boolean_1 = true;
const sc_lv<1> FFTipfn::ap_const_lv1_0 = "0";
const sc_lv<1> FFTipfn::ap_const_lv1_1 = "1";
const sc_lv<2> FFTipfn::ap_const_lv2_0 = "00";
const sc_lv<2> FFTipfn::ap_const_lv2_2 = "10";
const sc_lv<2> FFTipfn::ap_const_lv2_3 = "11";
const sc_lv<2> FFTipfn::ap_const_lv2_1 = "1";
const sc_lv<32> FFTipfn::ap_const_lv32_1 = "1";
const sc_lv<32> FFTipfn::ap_const_lv32_22 = "100010";
const bool FFTipfn::ap_const_boolean_0 = false;
const sc_lv<32> FFTipfn::ap_const_lv32_A = "1010";
const sc_lv<32> FFTipfn::ap_const_lv32_13 = "10011";
const sc_lv<32> FFTipfn::ap_const_lv32_1B = "11011";
const sc_lv<32> FFTipfn::ap_const_lv32_20 = "100000";
const sc_lv<32> FFTipfn::ap_const_lv32_3 = "11";
const sc_lv<32> FFTipfn::ap_const_lv32_5 = "101";
const sc_lv<32> FFTipfn::ap_const_lv32_6 = "110";
const sc_lv<32> FFTipfn::ap_const_lv32_7 = "111";
const sc_lv<32> FFTipfn::ap_const_lv32_8 = "1000";
const sc_lv<32> FFTipfn::ap_const_lv32_9 = "1001";
const sc_lv<32> FFTipfn::ap_const_lv32_E = "1110";
const sc_lv<32> FFTipfn::ap_const_lv32_18 = "11000";
const sc_lv<32> FFTipfn::ap_const_lv32_2 = "10";
const sc_lv<11> FFTipfn::ap_const_lv11_0 = "00000000000";
const sc_lv<32> FFTipfn::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<4> FFTipfn::ap_const_lv4_1 = "1";
const sc_lv<32> FFTipfn::ap_const_lv32_4 = "100";
const sc_lv<10> FFTipfn::ap_const_lv10_0 = "0000000000";
const sc_lv<32> FFTipfn::ap_const_lv32_21 = "100001";
const sc_lv<8> FFTipfn::ap_const_lv8_FF = "11111111";
const sc_lv<32> FFTipfn::ap_const_lv32_12 = "10010";
const sc_lv<32> FFTipfn::ap_const_lv32_19 = "11001";
const sc_lv<32> FFTipfn::ap_const_lv32_1A = "11010";
const sc_lv<32> FFTipfn::ap_const_lv32_F = "1111";
const sc_lv<32> FFTipfn::ap_const_lv32_14 = "10100";
const sc_lv<32> FFTipfn::ap_const_lv32_1C = "11100";
const sc_lv<32> FFTipfn::ap_const_lv32_B = "1011";
const sc_lv<11> FFTipfn::ap_const_lv11_400 = "10000000000";
const sc_lv<11> FFTipfn::ap_const_lv11_1 = "1";
const sc_lv<32> FFTipfn::ap_const_lv32_3F = "111111";
const sc_lv<4> FFTipfn::ap_const_lv4_B = "1011";
const sc_lv<10> FFTipfn::ap_const_lv10_1 = "1";
const sc_lv<32> FFTipfn::ap_const_lv32_1F = "11111";
const sc_lv<22> FFTipfn::ap_const_lv22_1 = "1";
const sc_lv<11> FFTipfn::ap_const_lv11_3FF = "1111111111";
const sc_lv<32> FFTipfn::ap_const_lv32_23 = "100011";

FFTipfn::FFTipfn(sc_module_name name) : sc_module(name), mVcdFile(0) {
    W_real_U = new FFTipfn_W_real("W_real_U");
    W_real_U->clk(ap_clk);
    W_real_U->reset(ap_rst_n_inv);
    W_real_U->address0(W_real_address0);
    W_real_U->ce0(W_real_ce0);
    W_real_U->q0(W_real_q0);
    W_imag_U = new FFTipfn_W_imag("W_imag_U");
    W_imag_U->clk(ap_clk);
    W_imag_U->reset(ap_rst_n_inv);
    W_imag_U->address0(W_imag_address0);
    W_imag_U->ce0(W_imag_ce0);
    W_imag_U->q0(W_imag_q0);
    tempout_R_U = new FFTipfn_tempout_R("tempout_R_U");
    tempout_R_U->clk(ap_clk);
    tempout_R_U->reset(ap_rst_n_inv);
    tempout_R_U->address0(tempout_R_address0);
    tempout_R_U->ce0(tempout_R_ce0);
    tempout_R_U->we0(tempout_R_we0);
    tempout_R_U->d0(tempout_R_d0);
    tempout_R_U->q0(tempout_R_q0);
    tempout_I_U = new FFTipfn_tempout_R("tempout_I_U");
    tempout_I_U->clk(ap_clk);
    tempout_I_U->reset(ap_rst_n_inv);
    tempout_I_U->address0(tempout_I_address0);
    tempout_I_U->ce0(tempout_I_ce0);
    tempout_I_U->we0(tempout_I_we0);
    tempout_I_U->d0(tempout_I_d0);
    tempout_I_U->q0(tempout_I_q0);
    FFTIn_R_U = new FFTipfn_tempout_R("FFTIn_R_U");
    FFTIn_R_U->clk(ap_clk);
    FFTIn_R_U->reset(ap_rst_n_inv);
    FFTIn_R_U->address0(FFTIn_R_address0);
    FFTIn_R_U->ce0(FFTIn_R_ce0);
    FFTIn_R_U->we0(FFTIn_R_we0);
    FFTIn_R_U->d0(FFTIn_R_d0);
    FFTIn_R_U->q0(FFTIn_R_q0);
    FFTIn_I_U = new FFTipfn_tempout_R("FFTIn_I_U");
    FFTIn_I_U->clk(ap_clk);
    FFTIn_I_U->reset(ap_rst_n_inv);
    FFTIn_I_U->address0(FFTIn_I_address0);
    FFTIn_I_U->ce0(FFTIn_I_ce0);
    FFTIn_I_U->we0(FFTIn_I_we0);
    FFTIn_I_U->d0(FFTIn_I_d0);
    FFTIn_I_U->q0(FFTIn_I_q0);
    FFTipfn_faddfsub_bkb_U1 = new FFTipfn_faddfsub_bkb<1,5,32,32,32>("FFTipfn_faddfsub_bkb_U1");
    FFTipfn_faddfsub_bkb_U1->clk(ap_clk);
    FFTipfn_faddfsub_bkb_U1->reset(ap_rst_n_inv);
    FFTipfn_faddfsub_bkb_U1->din0(grp_fu_341_p0);
    FFTipfn_faddfsub_bkb_U1->din1(grp_fu_341_p1);
    FFTipfn_faddfsub_bkb_U1->opcode(grp_fu_341_opcode);
    FFTipfn_faddfsub_bkb_U1->ce(ap_var_for_const0);
    FFTipfn_faddfsub_bkb_U1->dout(grp_fu_341_p2);
    FFTipfn_faddfsub_bkb_U2 = new FFTipfn_faddfsub_bkb<1,5,32,32,32>("FFTipfn_faddfsub_bkb_U2");
    FFTipfn_faddfsub_bkb_U2->clk(ap_clk);
    FFTipfn_faddfsub_bkb_U2->reset(ap_rst_n_inv);
    FFTipfn_faddfsub_bkb_U2->din0(grp_fu_345_p0);
    FFTipfn_faddfsub_bkb_U2->din1(grp_fu_345_p1);
    FFTipfn_faddfsub_bkb_U2->opcode(grp_fu_345_opcode);
    FFTipfn_faddfsub_bkb_U2->ce(ap_var_for_const0);
    FFTipfn_faddfsub_bkb_U2->dout(grp_fu_345_p2);
    FFTipfn_fmul_32nscud_U3 = new FFTipfn_fmul_32nscud<1,4,32,32,32>("FFTipfn_fmul_32nscud_U3");
    FFTipfn_fmul_32nscud_U3->clk(ap_clk);
    FFTipfn_fmul_32nscud_U3->reset(ap_rst_n_inv);
    FFTipfn_fmul_32nscud_U3->din0(reg_365);
    FFTipfn_fmul_32nscud_U3->din1(BFWeight_cos_reg_717);
    FFTipfn_fmul_32nscud_U3->ce(ap_var_for_const0);
    FFTipfn_fmul_32nscud_U3->dout(grp_fu_349_p2);
    FFTipfn_fmul_32nscud_U4 = new FFTipfn_fmul_32nscud<1,4,32,32,32>("FFTipfn_fmul_32nscud_U4");
    FFTipfn_fmul_32nscud_U4->clk(ap_clk);
    FFTipfn_fmul_32nscud_U4->reset(ap_rst_n_inv);
    FFTipfn_fmul_32nscud_U4->din0(reg_372);
    FFTipfn_fmul_32nscud_U4->din1(BFWeight_sin_reg_723);
    FFTipfn_fmul_32nscud_U4->ce(ap_var_for_const0);
    FFTipfn_fmul_32nscud_U4->dout(grp_fu_353_p2);
    FFTipfn_fmul_32nscud_U5 = new FFTipfn_fmul_32nscud<1,4,32,32,32>("FFTipfn_fmul_32nscud_U5");
    FFTipfn_fmul_32nscud_U5->clk(ap_clk);
    FFTipfn_fmul_32nscud_U5->reset(ap_rst_n_inv);
    FFTipfn_fmul_32nscud_U5->din0(reg_372);
    FFTipfn_fmul_32nscud_U5->din1(BFWeight_cos_reg_717);
    FFTipfn_fmul_32nscud_U5->ce(ap_var_for_const0);
    FFTipfn_fmul_32nscud_U5->dout(grp_fu_357_p2);
    FFTipfn_fmul_32nscud_U6 = new FFTipfn_fmul_32nscud<1,4,32,32,32>("FFTipfn_fmul_32nscud_U6");
    FFTipfn_fmul_32nscud_U6->clk(ap_clk);
    FFTipfn_fmul_32nscud_U6->reset(ap_rst_n_inv);
    FFTipfn_fmul_32nscud_U6->din0(reg_365);
    FFTipfn_fmul_32nscud_U6->din1(BFWeight_sin_reg_723);
    FFTipfn_fmul_32nscud_U6->ce(ap_var_for_const0);
    FFTipfn_fmul_32nscud_U6->dout(grp_fu_361_p2);
    FFTipfn_mul_mul_1dEe_U7 = new FFTipfn_mul_mul_1dEe<1,1,11,10,21>("FFTipfn_mul_mul_1dEe_U7");
    FFTipfn_mul_mul_1dEe_U7->din0(mul_ln43_fu_623_p0);
    FFTipfn_mul_mul_1dEe_U7->din1(mul_ln43_fu_623_p1);
    FFTipfn_mul_mul_1dEe_U7->dout(mul_ln43_fu_623_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_BFWidth_fu_500_p1);
    sensitive << ( lshr_ln_fu_490_p4 );

    SC_METHOD(thread_FFTIN_TDATA_blk_n);
    sensitive << ( FFTIN_V_data_0_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln20_fu_391_p2 );

    SC_METHOD(thread_FFTIN_TREADY);
    sensitive << ( FFTIN_V_keep_V_0_state );

    SC_METHOD(thread_FFTIN_V_data_0_ack_in);
    sensitive << ( FFTIN_V_data_0_state );

    SC_METHOD(thread_FFTIN_V_data_0_ack_out);
    sensitive << ( FFTIN_V_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln20_fu_391_p2 );

    SC_METHOD(thread_FFTIN_V_data_0_data_out);
    sensitive << ( FFTIN_V_data_0_payload_A );
    sensitive << ( FFTIN_V_data_0_payload_B );
    sensitive << ( FFTIN_V_data_0_sel );

    SC_METHOD(thread_FFTIN_V_data_0_load_A);
    sensitive << ( FFTIN_V_data_0_sel_wr );
    sensitive << ( FFTIN_V_data_0_state_cmp_full );

    SC_METHOD(thread_FFTIN_V_data_0_load_B);
    sensitive << ( FFTIN_V_data_0_sel_wr );
    sensitive << ( FFTIN_V_data_0_state_cmp_full );

    SC_METHOD(thread_FFTIN_V_data_0_sel);
    sensitive << ( FFTIN_V_data_0_sel_rd );

    SC_METHOD(thread_FFTIN_V_data_0_state_cmp_full);
    sensitive << ( FFTIN_V_data_0_state );

    SC_METHOD(thread_FFTIN_V_data_0_vld_in);
    sensitive << ( FFTIN_TVALID );

    SC_METHOD(thread_FFTIN_V_data_0_vld_out);
    sensitive << ( FFTIN_V_data_0_state );

    SC_METHOD(thread_FFTIN_V_keep_V_0_ack_out);
    sensitive << ( FFTIN_V_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln20_fu_391_p2 );

    SC_METHOD(thread_FFTIN_V_keep_V_0_vld_in);
    sensitive << ( FFTIN_TVALID );

    SC_METHOD(thread_FFTIn_I_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( zext_ln24_fu_431_p1 );
    sensitive << ( zext_ln31_fu_449_p1 );
    sensitive << ( ap_block_pp1_stage0 );

    SC_METHOD(thread_FFTIn_I_ce0);
    sensitive << ( FFTIN_V_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln20_fu_391_p2 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_FFTIn_I_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_data_M_imag_loa_fu_416_p4 );

    SC_METHOD(thread_FFTIn_I_we0);
    sensitive << ( FFTIN_V_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln20_fu_391_p2 );

    SC_METHOD(thread_FFTIn_R_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( zext_ln24_fu_431_p1 );
    sensitive << ( zext_ln31_fu_449_p1 );
    sensitive << ( ap_block_pp1_stage0 );

    SC_METHOD(thread_FFTIn_R_ce0);
    sensitive << ( FFTIN_V_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln20_fu_391_p2 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_FFTIn_R_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( trunc_ln7_fu_407_p1 );

    SC_METHOD(thread_FFTIn_R_we0);
    sensitive << ( FFTIN_V_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln20_fu_391_p2 );

    SC_METHOD(thread_FFTOUT_TDATA);
    sensitive << ( FFTOUT_V_data_1_data_out );

    SC_METHOD(thread_FFTOUT_TDATA_blk_n);
    sensitive << ( FFTOUT_V_data_1_state );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_enable_reg_pp2_iter1 );
    sensitive << ( ap_block_pp2_stage0 );
    sensitive << ( icmp_ln58_reg_787 );
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( icmp_ln58_reg_787_pp2_iter1_reg );

    SC_METHOD(thread_FFTOUT_TKEEP);
    sensitive << ( FFTOUT_V_keep_V_1_data_out );

    SC_METHOD(thread_FFTOUT_TLAST);
    sensitive << ( FFTOUT_V_last_V_1_data_out );

    SC_METHOD(thread_FFTOUT_TVALID);
    sensitive << ( FFTOUT_V_keep_V_1_state );

    SC_METHOD(thread_FFTOUT_V_data_1_ack_in);
    sensitive << ( FFTOUT_V_data_1_state );

    SC_METHOD(thread_FFTOUT_V_data_1_ack_out);
    sensitive << ( FFTOUT_TREADY );

    SC_METHOD(thread_FFTOUT_V_data_1_data_out);
    sensitive << ( FFTOUT_V_data_1_payload_A );
    sensitive << ( FFTOUT_V_data_1_payload_B );
    sensitive << ( FFTOUT_V_data_1_sel );

    SC_METHOD(thread_FFTOUT_V_data_1_load_A);
    sensitive << ( FFTOUT_V_data_1_sel_wr );
    sensitive << ( FFTOUT_V_data_1_state_cmp_full );

    SC_METHOD(thread_FFTOUT_V_data_1_load_B);
    sensitive << ( FFTOUT_V_data_1_sel_wr );
    sensitive << ( FFTOUT_V_data_1_state_cmp_full );

    SC_METHOD(thread_FFTOUT_V_data_1_sel);
    sensitive << ( FFTOUT_V_data_1_sel_rd );

    SC_METHOD(thread_FFTOUT_V_data_1_state_cmp_full);
    sensitive << ( FFTOUT_V_data_1_state );

    SC_METHOD(thread_FFTOUT_V_data_1_vld_in);
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_enable_reg_pp2_iter1 );
    sensitive << ( icmp_ln58_reg_787 );
    sensitive << ( ap_block_pp2_stage0_11001 );

    SC_METHOD(thread_FFTOUT_V_data_1_vld_out);
    sensitive << ( FFTOUT_V_data_1_state );

    SC_METHOD(thread_FFTOUT_V_keep_V_1_ack_out);
    sensitive << ( FFTOUT_TREADY );

    SC_METHOD(thread_FFTOUT_V_keep_V_1_data_out);
    sensitive << ( FFTOUT_V_keep_V_1_sel );

    SC_METHOD(thread_FFTOUT_V_keep_V_1_sel);
    sensitive << ( FFTOUT_V_keep_V_1_sel_rd );

    SC_METHOD(thread_FFTOUT_V_keep_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_enable_reg_pp2_iter1 );
    sensitive << ( icmp_ln58_reg_787 );
    sensitive << ( ap_block_pp2_stage0_11001 );

    SC_METHOD(thread_FFTOUT_V_keep_V_1_vld_out);
    sensitive << ( FFTOUT_V_keep_V_1_state );

    SC_METHOD(thread_FFTOUT_V_last_V_1_ack_in);
    sensitive << ( FFTOUT_V_last_V_1_state );

    SC_METHOD(thread_FFTOUT_V_last_V_1_ack_out);
    sensitive << ( FFTOUT_TREADY );

    SC_METHOD(thread_FFTOUT_V_last_V_1_data_out);
    sensitive << ( FFTOUT_V_last_V_1_payload_A );
    sensitive << ( FFTOUT_V_last_V_1_payload_B );
    sensitive << ( FFTOUT_V_last_V_1_sel );

    SC_METHOD(thread_FFTOUT_V_last_V_1_load_A);
    sensitive << ( FFTOUT_V_last_V_1_sel_wr );
    sensitive << ( FFTOUT_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_FFTOUT_V_last_V_1_load_B);
    sensitive << ( FFTOUT_V_last_V_1_sel_wr );
    sensitive << ( FFTOUT_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_FFTOUT_V_last_V_1_sel);
    sensitive << ( FFTOUT_V_last_V_1_sel_rd );

    SC_METHOD(thread_FFTOUT_V_last_V_1_state_cmp_full);
    sensitive << ( FFTOUT_V_last_V_1_state );

    SC_METHOD(thread_FFTOUT_V_last_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_enable_reg_pp2_iter1 );
    sensitive << ( icmp_ln58_reg_787 );
    sensitive << ( ap_block_pp2_stage0_11001 );

    SC_METHOD(thread_FFTOUT_V_last_V_1_vld_out);
    sensitive << ( FFTOUT_V_last_V_1_state );

    SC_METHOD(thread_W_imag_address0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( zext_ln43_fu_539_p1 );

    SC_METHOD(thread_W_imag_ce0);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_W_real_address0);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( zext_ln43_fu_539_p1 );

    SC_METHOD(thread_W_real_ce0);
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp2_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state39);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_11001);

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);

    SC_METHOD(thread_ap_block_pp2_stage0);

    SC_METHOD(thread_ap_block_pp2_stage0_01001);

    SC_METHOD(thread_ap_block_pp2_stage0_11001);
    sensitive << ( ap_enable_reg_pp2_iter1 );
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( ap_block_state37_io );
    sensitive << ( ap_block_state38_io );

    SC_METHOD(thread_ap_block_pp2_stage0_subdone);
    sensitive << ( ap_enable_reg_pp2_iter1 );
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( ap_block_state37_io );
    sensitive << ( ap_block_state38_io );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( FFTIN_V_data_0_vld_out );
    sensitive << ( icmp_ln20_fu_391_p2 );

    SC_METHOD(thread_ap_block_state36_pp2_stage0_iter0);

    SC_METHOD(thread_ap_block_state37_io);
    sensitive << ( FFTOUT_V_data_1_ack_in );
    sensitive << ( icmp_ln58_reg_787 );

    SC_METHOD(thread_ap_block_state37_pp2_stage0_iter1);

    SC_METHOD(thread_ap_block_state38_io);
    sensitive << ( FFTOUT_V_data_1_ack_in );
    sensitive << ( icmp_ln58_reg_787_pp2_iter1_reg );

    SC_METHOD(thread_ap_block_state38_pp2_stage0_iter2);

    SC_METHOD(thread_ap_block_state39);
    sensitive << ( FFTOUT_TREADY );
    sensitive << ( FFTOUT_V_data_1_state );
    sensitive << ( FFTOUT_V_last_V_1_state );
    sensitive << ( FFTOUT_V_keep_V_1_state );

    SC_METHOD(thread_ap_block_state4_pp1_stage0_iter0);

    SC_METHOD(thread_ap_block_state5_pp1_stage0_iter1);

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state4);
    sensitive << ( icmp_ln29_fu_437_p2 );

    SC_METHOD(thread_ap_condition_pp2_exit_iter0_state36);
    sensitive << ( icmp_ln58_fu_582_p2 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_enable_pp2);
    sensitive << ( ap_idle_pp2 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_ap_idle_pp2);
    sensitive << ( ap_enable_reg_pp2_iter1 );
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( ap_enable_reg_pp2_iter0 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_bitcast_ln162_1_fu_610_p1);
    sensitive << ( tempout_I_q0 );

    SC_METHOD(thread_bitcast_ln162_fu_606_p1);
    sensitive << ( tempout_R_q0 );

    SC_METHOD(thread_grp_fu_341_opcode);
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_grp_fu_341_p0);
    sensitive << ( reg_365 );
    sensitive << ( tmp_1_reg_757 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_grp_fu_341_p1);
    sensitive << ( reg_379 );
    sensitive << ( tmp_2_reg_762 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_grp_fu_345_opcode);
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_grp_fu_345_p0);
    sensitive << ( reg_372 );
    sensitive << ( tmp_3_reg_767 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_grp_fu_345_p1);
    sensitive << ( reg_385 );
    sensitive << ( tmp_4_reg_772 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state30 );

    SC_METHOD(thread_i_4_fu_443_p2);
    sensitive << ( i_1_reg_287 );

    SC_METHOD(thread_i_5_fu_588_p2);
    sensitive << ( i_3_reg_330 );

    SC_METHOD(thread_i_7_fu_577_p2);
    sensitive << ( zext_ln40_reg_664 );
    sensitive << ( i_2_reg_321 );

    SC_METHOD(thread_i_fu_397_p2);
    sensitive << ( i_0_reg_276 );

    SC_METHOD(thread_i_lower_fu_560_p2);
    sensitive << ( BFWidth_reg_674 );
    sensitive << ( i_2_reg_321 );

    SC_METHOD(thread_icmp_ln20_fu_391_p2);
    sensitive << ( FFTIN_V_data_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln20_fu_391_p2 );
    sensitive << ( i_0_reg_276 );

    SC_METHOD(thread_icmp_ln29_fu_437_p2);
    sensitive << ( i_1_reg_287 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_icmp_ln38_fu_474_p2);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( stage_0_reg_298 );

    SC_METHOD(thread_icmp_ln42_fu_522_p2);
    sensitive << ( lshr_ln_reg_669 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( i_6_reg_310 );

    SC_METHOD(thread_icmp_ln45_fu_554_p2);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_10_fu_544_p4 );

    SC_METHOD(thread_icmp_ln58_fu_582_p2);
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( i_3_reg_330 );
    sensitive << ( ap_block_pp2_stage0_11001 );
    sensitive << ( ap_enable_reg_pp2_iter0 );

    SC_METHOD(thread_j_fu_527_p2);
    sensitive << ( i_6_reg_310 );

    SC_METHOD(thread_lshr_ln43_fu_504_p2);
    sensitive << ( zext_ln38_fu_470_p1 );

    SC_METHOD(thread_lshr_ln_fu_490_p4);
    sensitive << ( subDFTSize_fu_480_p2 );

    SC_METHOD(thread_mul_ln43_fu_623_p0);
    sensitive << ( zext_ln42_reg_679 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_mul_ln43_fu_623_p1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( mul_ln43_fu_623_p10 );

    SC_METHOD(thread_mul_ln43_fu_623_p10);
    sensitive << ( i_6_reg_310 );

    SC_METHOD(thread_or_ln31_8_fu_455_p4);
    sensitive << ( i_1_reg_287 );

    SC_METHOD(thread_sext_ln47_fu_565_p1);
    sensitive << ( i_lower_fu_560_p2 );

    SC_METHOD(thread_sext_ln50_fu_571_p1);
    sensitive << ( i_2_reg_321 );

    SC_METHOD(thread_stage_fu_533_p2);
    sensitive << ( stage_0_reg_298 );

    SC_METHOD(thread_subDFTSize_fu_480_p2);
    sensitive << ( zext_ln38_fu_470_p1 );

    SC_METHOD(thread_tempout_I_address0);
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_block_pp2_stage0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tempout_I_addr_2_reg_737 );
    sensitive << ( tempout_I_addr_3_reg_747 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( zext_ln31_1_fu_465_p1 );
    sensitive << ( sext_ln47_fu_565_p1 );
    sensitive << ( zext_ln60_fu_594_p1 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );

    SC_METHOD(thread_tempout_I_ce0);
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_block_pp2_stage0_11001 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );

    SC_METHOD(thread_tempout_I_d0);
    sensitive << ( reg_385 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( tmp_6_reg_782 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( FFTIn_I_q0 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_tempout_I_we0);
    sensitive << ( icmp_ln29_reg_636 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_tempout_R_address0);
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_block_pp2_stage0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( tempout_R_addr_2_reg_732 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tempout_R_addr_3_reg_742 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( zext_ln31_1_fu_465_p1 );
    sensitive << ( sext_ln47_fu_565_p1 );
    sensitive << ( zext_ln60_fu_594_p1 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );

    SC_METHOD(thread_tempout_R_ce0);
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_block_pp2_stage0_11001 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );

    SC_METHOD(thread_tempout_R_d0);
    sensitive << ( reg_379 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( tmp_5_reg_777 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( FFTIn_R_q0 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_tempout_R_we0);
    sensitive << ( icmp_ln29_reg_636 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_tmp_10_fu_544_p4);
    sensitive << ( i_2_reg_321 );

    SC_METHOD(thread_tmp_data_1_fu_614_p3);
    sensitive << ( bitcast_ln162_1_fu_610_p1 );
    sensitive << ( bitcast_ln162_fu_606_p1 );

    SC_METHOD(thread_tmp_data_M_imag_loa_fu_416_p4);
    sensitive << ( FFTIN_V_data_0_data_out );

    SC_METHOD(thread_tmp_last_V_fu_600_p2);
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( i_3_reg_330 );
    sensitive << ( icmp_ln58_fu_582_p2 );
    sensitive << ( ap_block_pp2_stage0_11001 );
    sensitive << ( ap_enable_reg_pp2_iter0 );

    SC_METHOD(thread_trunc_ln7_fu_407_p1);
    sensitive << ( FFTIN_V_data_0_data_out );

    SC_METHOD(thread_zext_ln24_fu_431_p1);
    sensitive << ( i_0_reg_276 );

    SC_METHOD(thread_zext_ln31_1_fu_465_p1);
    sensitive << ( or_ln31_8_reg_650 );

    SC_METHOD(thread_zext_ln31_fu_449_p1);
    sensitive << ( i_1_reg_287 );

    SC_METHOD(thread_zext_ln38_fu_470_p1);
    sensitive << ( stage_0_reg_298 );

    SC_METHOD(thread_zext_ln40_fu_486_p1);
    sensitive << ( subDFTSize_fu_480_p2 );

    SC_METHOD(thread_zext_ln42_1_fu_514_p1);
    sensitive << ( i_6_reg_310 );

    SC_METHOD(thread_zext_ln42_fu_510_p1);
    sensitive << ( lshr_ln43_fu_504_p2 );

    SC_METHOD(thread_zext_ln43_fu_539_p1);
    sensitive << ( mul_ln43_reg_697 );

    SC_METHOD(thread_zext_ln60_fu_594_p1);
    sensitive << ( i_3_reg_330 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( FFTIN_V_data_0_vld_out );
    sensitive << ( FFTOUT_TREADY );
    sensitive << ( FFTOUT_V_data_1_state );
    sensitive << ( FFTOUT_V_last_V_1_state );
    sensitive << ( FFTOUT_V_keep_V_1_state );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln20_fu_391_p2 );
    sensitive << ( ap_enable_reg_pp2_iter1 );
    sensitive << ( ap_enable_reg_pp2_iter2 );
    sensitive << ( icmp_ln29_fu_437_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( icmp_ln38_fu_474_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln42_fu_522_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln45_fu_554_p2 );
    sensitive << ( icmp_ln58_fu_582_p2 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_block_pp1_stage0_subdone );
    sensitive << ( ap_block_pp2_stage0_subdone );
    sensitive << ( ap_CS_fsm_state39 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    FFTIN_V_data_0_sel_rd = SC_LOGIC_0;
    FFTIN_V_data_0_sel_wr = SC_LOGIC_0;
    FFTIN_V_data_0_state = "00";
    FFTIN_V_keep_V_0_state = "00";
    FFTOUT_V_data_1_sel_rd = SC_LOGIC_0;
    FFTOUT_V_data_1_sel_wr = SC_LOGIC_0;
    FFTOUT_V_data_1_state = "00";
    FFTOUT_V_last_V_1_sel_rd = SC_LOGIC_0;
    FFTOUT_V_last_V_1_sel_wr = SC_LOGIC_0;
    FFTOUT_V_last_V_1_state = "00";
    FFTOUT_V_keep_V_1_sel_rd = SC_LOGIC_0;
    FFTOUT_V_keep_V_1_state = "00";
    ap_CS_fsm = "000000000000000000000000000000000001";
    ap_enable_reg_pp2_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "FFTipfn_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, FFTIN_TDATA, "(port)FFTIN_TDATA");
    sc_trace(mVcdFile, FFTIN_TVALID, "(port)FFTIN_TVALID");
    sc_trace(mVcdFile, FFTIN_TREADY, "(port)FFTIN_TREADY");
    sc_trace(mVcdFile, FFTIN_TLAST, "(port)FFTIN_TLAST");
    sc_trace(mVcdFile, FFTIN_TKEEP, "(port)FFTIN_TKEEP");
    sc_trace(mVcdFile, FFTOUT_TDATA, "(port)FFTOUT_TDATA");
    sc_trace(mVcdFile, FFTOUT_TVALID, "(port)FFTOUT_TVALID");
    sc_trace(mVcdFile, FFTOUT_TREADY, "(port)FFTOUT_TREADY");
    sc_trace(mVcdFile, FFTOUT_TLAST, "(port)FFTOUT_TLAST");
    sc_trace(mVcdFile, FFTOUT_TKEEP, "(port)FFTOUT_TKEEP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, FFTIN_V_data_0_data_out, "FFTIN_V_data_0_data_out");
    sc_trace(mVcdFile, FFTIN_V_data_0_vld_in, "FFTIN_V_data_0_vld_in");
    sc_trace(mVcdFile, FFTIN_V_data_0_vld_out, "FFTIN_V_data_0_vld_out");
    sc_trace(mVcdFile, FFTIN_V_data_0_ack_in, "FFTIN_V_data_0_ack_in");
    sc_trace(mVcdFile, FFTIN_V_data_0_ack_out, "FFTIN_V_data_0_ack_out");
    sc_trace(mVcdFile, FFTIN_V_data_0_payload_A, "FFTIN_V_data_0_payload_A");
    sc_trace(mVcdFile, FFTIN_V_data_0_payload_B, "FFTIN_V_data_0_payload_B");
    sc_trace(mVcdFile, FFTIN_V_data_0_sel_rd, "FFTIN_V_data_0_sel_rd");
    sc_trace(mVcdFile, FFTIN_V_data_0_sel_wr, "FFTIN_V_data_0_sel_wr");
    sc_trace(mVcdFile, FFTIN_V_data_0_sel, "FFTIN_V_data_0_sel");
    sc_trace(mVcdFile, FFTIN_V_data_0_load_A, "FFTIN_V_data_0_load_A");
    sc_trace(mVcdFile, FFTIN_V_data_0_load_B, "FFTIN_V_data_0_load_B");
    sc_trace(mVcdFile, FFTIN_V_data_0_state, "FFTIN_V_data_0_state");
    sc_trace(mVcdFile, FFTIN_V_data_0_state_cmp_full, "FFTIN_V_data_0_state_cmp_full");
    sc_trace(mVcdFile, FFTIN_V_keep_V_0_vld_in, "FFTIN_V_keep_V_0_vld_in");
    sc_trace(mVcdFile, FFTIN_V_keep_V_0_ack_out, "FFTIN_V_keep_V_0_ack_out");
    sc_trace(mVcdFile, FFTIN_V_keep_V_0_state, "FFTIN_V_keep_V_0_state");
    sc_trace(mVcdFile, FFTOUT_V_data_1_data_out, "FFTOUT_V_data_1_data_out");
    sc_trace(mVcdFile, FFTOUT_V_data_1_vld_in, "FFTOUT_V_data_1_vld_in");
    sc_trace(mVcdFile, FFTOUT_V_data_1_vld_out, "FFTOUT_V_data_1_vld_out");
    sc_trace(mVcdFile, FFTOUT_V_data_1_ack_in, "FFTOUT_V_data_1_ack_in");
    sc_trace(mVcdFile, FFTOUT_V_data_1_ack_out, "FFTOUT_V_data_1_ack_out");
    sc_trace(mVcdFile, FFTOUT_V_data_1_payload_A, "FFTOUT_V_data_1_payload_A");
    sc_trace(mVcdFile, FFTOUT_V_data_1_payload_B, "FFTOUT_V_data_1_payload_B");
    sc_trace(mVcdFile, FFTOUT_V_data_1_sel_rd, "FFTOUT_V_data_1_sel_rd");
    sc_trace(mVcdFile, FFTOUT_V_data_1_sel_wr, "FFTOUT_V_data_1_sel_wr");
    sc_trace(mVcdFile, FFTOUT_V_data_1_sel, "FFTOUT_V_data_1_sel");
    sc_trace(mVcdFile, FFTOUT_V_data_1_load_A, "FFTOUT_V_data_1_load_A");
    sc_trace(mVcdFile, FFTOUT_V_data_1_load_B, "FFTOUT_V_data_1_load_B");
    sc_trace(mVcdFile, FFTOUT_V_data_1_state, "FFTOUT_V_data_1_state");
    sc_trace(mVcdFile, FFTOUT_V_data_1_state_cmp_full, "FFTOUT_V_data_1_state_cmp_full");
    sc_trace(mVcdFile, FFTOUT_V_last_V_1_data_out, "FFTOUT_V_last_V_1_data_out");
    sc_trace(mVcdFile, FFTOUT_V_last_V_1_vld_in, "FFTOUT_V_last_V_1_vld_in");
    sc_trace(mVcdFile, FFTOUT_V_last_V_1_vld_out, "FFTOUT_V_last_V_1_vld_out");
    sc_trace(mVcdFile, FFTOUT_V_last_V_1_ack_in, "FFTOUT_V_last_V_1_ack_in");
    sc_trace(mVcdFile, FFTOUT_V_last_V_1_ack_out, "FFTOUT_V_last_V_1_ack_out");
    sc_trace(mVcdFile, FFTOUT_V_last_V_1_payload_A, "FFTOUT_V_last_V_1_payload_A");
    sc_trace(mVcdFile, FFTOUT_V_last_V_1_payload_B, "FFTOUT_V_last_V_1_payload_B");
    sc_trace(mVcdFile, FFTOUT_V_last_V_1_sel_rd, "FFTOUT_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, FFTOUT_V_last_V_1_sel_wr, "FFTOUT_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, FFTOUT_V_last_V_1_sel, "FFTOUT_V_last_V_1_sel");
    sc_trace(mVcdFile, FFTOUT_V_last_V_1_load_A, "FFTOUT_V_last_V_1_load_A");
    sc_trace(mVcdFile, FFTOUT_V_last_V_1_load_B, "FFTOUT_V_last_V_1_load_B");
    sc_trace(mVcdFile, FFTOUT_V_last_V_1_state, "FFTOUT_V_last_V_1_state");
    sc_trace(mVcdFile, FFTOUT_V_last_V_1_state_cmp_full, "FFTOUT_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, FFTOUT_V_keep_V_1_data_out, "FFTOUT_V_keep_V_1_data_out");
    sc_trace(mVcdFile, FFTOUT_V_keep_V_1_vld_in, "FFTOUT_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, FFTOUT_V_keep_V_1_vld_out, "FFTOUT_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, FFTOUT_V_keep_V_1_ack_out, "FFTOUT_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, FFTOUT_V_keep_V_1_sel_rd, "FFTOUT_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, FFTOUT_V_keep_V_1_sel, "FFTOUT_V_keep_V_1_sel");
    sc_trace(mVcdFile, FFTOUT_V_keep_V_1_state, "FFTOUT_V_keep_V_1_state");
    sc_trace(mVcdFile, W_real_address0, "W_real_address0");
    sc_trace(mVcdFile, W_real_ce0, "W_real_ce0");
    sc_trace(mVcdFile, W_real_q0, "W_real_q0");
    sc_trace(mVcdFile, W_imag_address0, "W_imag_address0");
    sc_trace(mVcdFile, W_imag_ce0, "W_imag_ce0");
    sc_trace(mVcdFile, W_imag_q0, "W_imag_q0");
    sc_trace(mVcdFile, FFTIN_TDATA_blk_n, "FFTIN_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln20_fu_391_p2, "icmp_ln20_fu_391_p2");
    sc_trace(mVcdFile, FFTOUT_TDATA_blk_n, "FFTOUT_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp2_stage0, "ap_CS_fsm_pp2_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter1, "ap_enable_reg_pp2_iter1");
    sc_trace(mVcdFile, ap_block_pp2_stage0, "ap_block_pp2_stage0");
    sc_trace(mVcdFile, icmp_ln58_reg_787, "icmp_ln58_reg_787");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter2, "ap_enable_reg_pp2_iter2");
    sc_trace(mVcdFile, icmp_ln58_reg_787_pp2_iter1_reg, "icmp_ln58_reg_787_pp2_iter1_reg");
    sc_trace(mVcdFile, i_1_reg_287, "i_1_reg_287");
    sc_trace(mVcdFile, i_3_reg_330, "i_3_reg_330");
    sc_trace(mVcdFile, tempout_R_q0, "tempout_R_q0");
    sc_trace(mVcdFile, reg_365, "reg_365");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, tempout_I_q0, "tempout_I_q0");
    sc_trace(mVcdFile, reg_372, "reg_372");
    sc_trace(mVcdFile, grp_fu_341_p2, "grp_fu_341_p2");
    sc_trace(mVcdFile, reg_379, "reg_379");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, grp_fu_345_p2, "grp_fu_345_p2");
    sc_trace(mVcdFile, reg_385, "reg_385");
    sc_trace(mVcdFile, i_fu_397_p2, "i_fu_397_p2");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, icmp_ln29_fu_437_p2, "icmp_ln29_fu_437_p2");
    sc_trace(mVcdFile, icmp_ln29_reg_636, "icmp_ln29_reg_636");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_block_state4_pp1_stage0_iter0, "ap_block_state4_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state5_pp1_stage0_iter1, "ap_block_state5_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, i_4_fu_443_p2, "i_4_fu_443_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, or_ln31_8_fu_455_p4, "or_ln31_8_fu_455_p4");
    sc_trace(mVcdFile, or_ln31_8_reg_650, "or_ln31_8_reg_650");
    sc_trace(mVcdFile, icmp_ln38_fu_474_p2, "icmp_ln38_fu_474_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, zext_ln40_fu_486_p1, "zext_ln40_fu_486_p1");
    sc_trace(mVcdFile, zext_ln40_reg_664, "zext_ln40_reg_664");
    sc_trace(mVcdFile, lshr_ln_fu_490_p4, "lshr_ln_fu_490_p4");
    sc_trace(mVcdFile, lshr_ln_reg_669, "lshr_ln_reg_669");
    sc_trace(mVcdFile, BFWidth_fu_500_p1, "BFWidth_fu_500_p1");
    sc_trace(mVcdFile, BFWidth_reg_674, "BFWidth_reg_674");
    sc_trace(mVcdFile, zext_ln42_fu_510_p1, "zext_ln42_fu_510_p1");
    sc_trace(mVcdFile, zext_ln42_reg_679, "zext_ln42_reg_679");
    sc_trace(mVcdFile, zext_ln42_1_fu_514_p1, "zext_ln42_1_fu_514_p1");
    sc_trace(mVcdFile, zext_ln42_1_reg_684, "zext_ln42_1_reg_684");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, j_fu_527_p2, "j_fu_527_p2");
    sc_trace(mVcdFile, j_reg_692, "j_reg_692");
    sc_trace(mVcdFile, mul_ln43_fu_623_p2, "mul_ln43_fu_623_p2");
    sc_trace(mVcdFile, mul_ln43_reg_697, "mul_ln43_reg_697");
    sc_trace(mVcdFile, icmp_ln42_fu_522_p2, "icmp_ln42_fu_522_p2");
    sc_trace(mVcdFile, stage_fu_533_p2, "stage_fu_533_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, BFWeight_cos_reg_717, "BFWeight_cos_reg_717");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, BFWeight_sin_reg_723, "BFWeight_sin_reg_723");
    sc_trace(mVcdFile, tempout_R_addr_2_reg_732, "tempout_R_addr_2_reg_732");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, icmp_ln45_fu_554_p2, "icmp_ln45_fu_554_p2");
    sc_trace(mVcdFile, tempout_I_addr_2_reg_737, "tempout_I_addr_2_reg_737");
    sc_trace(mVcdFile, tempout_R_addr_3_reg_742, "tempout_R_addr_3_reg_742");
    sc_trace(mVcdFile, tempout_I_addr_3_reg_747, "tempout_I_addr_3_reg_747");
    sc_trace(mVcdFile, i_7_fu_577_p2, "i_7_fu_577_p2");
    sc_trace(mVcdFile, i_7_reg_752, "i_7_reg_752");
    sc_trace(mVcdFile, grp_fu_349_p2, "grp_fu_349_p2");
    sc_trace(mVcdFile, tmp_1_reg_757, "tmp_1_reg_757");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, grp_fu_353_p2, "grp_fu_353_p2");
    sc_trace(mVcdFile, tmp_2_reg_762, "tmp_2_reg_762");
    sc_trace(mVcdFile, grp_fu_357_p2, "grp_fu_357_p2");
    sc_trace(mVcdFile, tmp_3_reg_767, "tmp_3_reg_767");
    sc_trace(mVcdFile, grp_fu_361_p2, "grp_fu_361_p2");
    sc_trace(mVcdFile, tmp_4_reg_772, "tmp_4_reg_772");
    sc_trace(mVcdFile, tmp_5_reg_777, "tmp_5_reg_777");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, tmp_6_reg_782, "tmp_6_reg_782");
    sc_trace(mVcdFile, icmp_ln58_fu_582_p2, "icmp_ln58_fu_582_p2");
    sc_trace(mVcdFile, ap_block_state36_pp2_stage0_iter0, "ap_block_state36_pp2_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state37_pp2_stage0_iter1, "ap_block_state37_pp2_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state37_io, "ap_block_state37_io");
    sc_trace(mVcdFile, ap_block_state38_pp2_stage0_iter2, "ap_block_state38_pp2_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state38_io, "ap_block_state38_io");
    sc_trace(mVcdFile, ap_block_pp2_stage0_11001, "ap_block_pp2_stage0_11001");
    sc_trace(mVcdFile, i_5_fu_588_p2, "i_5_fu_588_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter0, "ap_enable_reg_pp2_iter0");
    sc_trace(mVcdFile, tmp_last_V_fu_600_p2, "tmp_last_V_fu_600_p2");
    sc_trace(mVcdFile, tmp_last_V_reg_806, "tmp_last_V_reg_806");
    sc_trace(mVcdFile, tmp_data_1_fu_614_p3, "tmp_data_1_fu_614_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state4, "ap_condition_pp1_exit_iter0_state4");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, ap_block_pp2_stage0_subdone, "ap_block_pp2_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp2_exit_iter0_state36, "ap_condition_pp2_exit_iter0_state36");
    sc_trace(mVcdFile, tempout_R_address0, "tempout_R_address0");
    sc_trace(mVcdFile, tempout_R_ce0, "tempout_R_ce0");
    sc_trace(mVcdFile, tempout_R_we0, "tempout_R_we0");
    sc_trace(mVcdFile, tempout_R_d0, "tempout_R_d0");
    sc_trace(mVcdFile, tempout_I_address0, "tempout_I_address0");
    sc_trace(mVcdFile, tempout_I_ce0, "tempout_I_ce0");
    sc_trace(mVcdFile, tempout_I_we0, "tempout_I_we0");
    sc_trace(mVcdFile, tempout_I_d0, "tempout_I_d0");
    sc_trace(mVcdFile, FFTIn_R_address0, "FFTIn_R_address0");
    sc_trace(mVcdFile, FFTIn_R_ce0, "FFTIn_R_ce0");
    sc_trace(mVcdFile, FFTIn_R_we0, "FFTIn_R_we0");
    sc_trace(mVcdFile, FFTIn_R_d0, "FFTIn_R_d0");
    sc_trace(mVcdFile, FFTIn_R_q0, "FFTIn_R_q0");
    sc_trace(mVcdFile, FFTIn_I_address0, "FFTIn_I_address0");
    sc_trace(mVcdFile, FFTIn_I_ce0, "FFTIn_I_ce0");
    sc_trace(mVcdFile, FFTIn_I_we0, "FFTIn_I_we0");
    sc_trace(mVcdFile, FFTIn_I_d0, "FFTIn_I_d0");
    sc_trace(mVcdFile, FFTIn_I_q0, "FFTIn_I_q0");
    sc_trace(mVcdFile, i_0_reg_276, "i_0_reg_276");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, stage_0_reg_298, "stage_0_reg_298");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, i_6_reg_310, "i_6_reg_310");
    sc_trace(mVcdFile, i_2_reg_321, "i_2_reg_321");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, zext_ln24_fu_431_p1, "zext_ln24_fu_431_p1");
    sc_trace(mVcdFile, zext_ln31_fu_449_p1, "zext_ln31_fu_449_p1");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, zext_ln31_1_fu_465_p1, "zext_ln31_1_fu_465_p1");
    sc_trace(mVcdFile, zext_ln43_fu_539_p1, "zext_ln43_fu_539_p1");
    sc_trace(mVcdFile, sext_ln47_fu_565_p1, "sext_ln47_fu_565_p1");
    sc_trace(mVcdFile, sext_ln50_fu_571_p1, "sext_ln50_fu_571_p1");
    sc_trace(mVcdFile, zext_ln60_fu_594_p1, "zext_ln60_fu_594_p1");
    sc_trace(mVcdFile, ap_block_pp2_stage0_01001, "ap_block_pp2_stage0_01001");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, grp_fu_341_p0, "grp_fu_341_p0");
    sc_trace(mVcdFile, grp_fu_341_p1, "grp_fu_341_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, grp_fu_345_p0, "grp_fu_345_p0");
    sc_trace(mVcdFile, grp_fu_345_p1, "grp_fu_345_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, trunc_ln7_fu_407_p1, "trunc_ln7_fu_407_p1");
    sc_trace(mVcdFile, tmp_data_M_imag_loa_fu_416_p4, "tmp_data_M_imag_loa_fu_416_p4");
    sc_trace(mVcdFile, zext_ln38_fu_470_p1, "zext_ln38_fu_470_p1");
    sc_trace(mVcdFile, subDFTSize_fu_480_p2, "subDFTSize_fu_480_p2");
    sc_trace(mVcdFile, lshr_ln43_fu_504_p2, "lshr_ln43_fu_504_p2");
    sc_trace(mVcdFile, tmp_10_fu_544_p4, "tmp_10_fu_544_p4");
    sc_trace(mVcdFile, i_lower_fu_560_p2, "i_lower_fu_560_p2");
    sc_trace(mVcdFile, bitcast_ln162_1_fu_610_p1, "bitcast_ln162_1_fu_610_p1");
    sc_trace(mVcdFile, bitcast_ln162_fu_606_p1, "bitcast_ln162_fu_606_p1");
    sc_trace(mVcdFile, mul_ln43_fu_623_p0, "mul_ln43_fu_623_p0");
    sc_trace(mVcdFile, mul_ln43_fu_623_p1, "mul_ln43_fu_623_p1");
    sc_trace(mVcdFile, grp_fu_341_opcode, "grp_fu_341_opcode");
    sc_trace(mVcdFile, grp_fu_345_opcode, "grp_fu_345_opcode");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state39, "ap_CS_fsm_state39");
    sc_trace(mVcdFile, ap_block_state39, "ap_block_state39");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
    sc_trace(mVcdFile, ap_idle_pp2, "ap_idle_pp2");
    sc_trace(mVcdFile, ap_enable_pp2, "ap_enable_pp2");
    sc_trace(mVcdFile, mul_ln43_fu_623_p10, "mul_ln43_fu_623_p10");
#endif

    }
    mHdltvinHandle.open("FFTipfn.hdltvin.dat");
    mHdltvoutHandle.open("FFTipfn.hdltvout.dat");
}

FFTipfn::~FFTipfn() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete W_real_U;
    delete W_imag_U;
    delete tempout_R_U;
    delete tempout_I_U;
    delete FFTIn_R_U;
    delete FFTIn_I_U;
    delete FFTipfn_faddfsub_bkb_U1;
    delete FFTipfn_faddfsub_bkb_U2;
    delete FFTipfn_fmul_32nscud_U3;
    delete FFTipfn_fmul_32nscud_U4;
    delete FFTipfn_fmul_32nscud_U5;
    delete FFTipfn_fmul_32nscud_U6;
    delete FFTipfn_mul_mul_1dEe_U7;
}

void FFTipfn::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void FFTipfn::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        FFTIN_V_data_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, FFTIN_V_data_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, FFTIN_V_data_0_vld_out.read()))) {
            FFTIN_V_data_0_sel_rd =  (sc_logic) (~FFTIN_V_data_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        FFTIN_V_data_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, FFTIN_V_data_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, FFTIN_V_data_0_ack_in.read()))) {
            FFTIN_V_data_0_sel_wr =  (sc_logic) (~FFTIN_V_data_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        FFTIN_V_data_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, FFTIN_V_data_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, FFTIN_V_data_0_ack_out.read()) && 
              esl_seteq<1,2,2>(FFTIN_V_data_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, FFTIN_V_data_0_vld_in.read()) && 
              esl_seteq<1,2,2>(FFTIN_V_data_0_state.read(), ap_const_lv2_2)))) {
            FFTIN_V_data_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, FFTIN_V_data_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, FFTIN_V_data_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(FFTIN_V_data_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, FFTIN_V_data_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(FFTIN_V_data_0_state.read(), ap_const_lv2_1)))) {
            FFTIN_V_data_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, FFTIN_V_data_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(FFTIN_V_data_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, FFTIN_V_data_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(FFTIN_V_data_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(FFTIN_V_data_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, FFTIN_V_data_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, FFTIN_V_data_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, FFTIN_V_data_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, FFTIN_V_data_0_ack_out.read()))))) {
            FFTIN_V_data_0_state = ap_const_lv2_3;
        } else {
            FFTIN_V_data_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        FFTIN_V_keep_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, FFTIN_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, FFTIN_V_keep_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, FFTIN_V_keep_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, FFTIN_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, FFTIN_V_keep_V_0_state.read())))) {
            FFTIN_V_keep_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, FFTIN_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, FFTIN_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, FFTIN_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, FFTIN_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, FFTIN_V_keep_V_0_state.read())))) {
            FFTIN_V_keep_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, FFTIN_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, FFTIN_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, FFTIN_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, FFTIN_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, FFTIN_V_keep_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, FFTIN_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, FFTIN_V_keep_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, FFTIN_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, FFTIN_V_keep_V_0_ack_out.read()))))) {
            FFTIN_V_keep_V_0_state = ap_const_lv2_3;
        } else {
            FFTIN_V_keep_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        FFTOUT_V_data_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_data_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_data_1_vld_out.read()))) {
            FFTOUT_V_data_1_sel_rd =  (sc_logic) (~FFTOUT_V_data_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        FFTOUT_V_data_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_data_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_data_1_ack_in.read()))) {
            FFTOUT_V_data_1_sel_wr =  (sc_logic) (~FFTOUT_V_data_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        FFTOUT_V_data_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_V_data_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_data_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, FFTOUT_V_data_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_V_data_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, FFTOUT_V_data_1_state.read())))) {
            FFTOUT_V_data_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_data_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, FFTOUT_V_data_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, FFTOUT_V_data_1_state.read())))) {
            FFTOUT_V_data_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_data_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, FFTOUT_V_data_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_data_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, FFTOUT_V_data_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, FFTOUT_V_data_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_data_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_V_data_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_data_1_ack_out.read()))))) {
            FFTOUT_V_data_1_state = ap_const_lv2_3;
        } else {
            FFTOUT_V_data_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        FFTOUT_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_keep_V_1_vld_out.read()))) {
            FFTOUT_V_keep_V_1_sel_rd =  (sc_logic) (~FFTOUT_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        FFTOUT_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, FFTOUT_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, FFTOUT_V_keep_V_1_state.read())))) {
            FFTOUT_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, FFTOUT_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, FFTOUT_V_keep_V_1_state.read())))) {
            FFTOUT_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, FFTOUT_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, FFTOUT_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, FFTOUT_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_keep_V_1_ack_out.read()))))) {
            FFTOUT_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            FFTOUT_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        FFTOUT_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_last_V_1_vld_out.read()))) {
            FFTOUT_V_last_V_1_sel_rd =  (sc_logic) (~FFTOUT_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        FFTOUT_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_last_V_1_ack_in.read()))) {
            FFTOUT_V_last_V_1_sel_wr =  (sc_logic) (~FFTOUT_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        FFTOUT_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, FFTOUT_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, FFTOUT_V_last_V_1_state.read())))) {
            FFTOUT_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, FFTOUT_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, FFTOUT_V_last_V_1_state.read())))) {
            FFTOUT_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, FFTOUT_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, FFTOUT_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, FFTOUT_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_last_V_1_ack_out.read()))))) {
            FFTOUT_V_last_V_1_state = ap_const_lv2_3;
        } else {
            FFTOUT_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state4.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state4.read()))) {
            ap_enable_reg_pp1_iter1 = (ap_condition_pp1_exit_iter0_state4.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            ap_enable_reg_pp1_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp2_exit_iter0_state36.read()))) {
            ap_enable_reg_pp2_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln38_fu_474_p2.read()))) {
            ap_enable_reg_pp2_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp2_exit_iter0_state36.read())) {
                ap_enable_reg_pp2_iter1 = (ap_condition_pp2_exit_iter0_state36.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp2_iter1 = ap_enable_reg_pp2_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp2_iter2 = ap_enable_reg_pp2_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln38_fu_474_p2.read()))) {
            ap_enable_reg_pp2_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_391_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_391_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, FFTIN_V_data_0_vld_out.read())))) {
        i_0_reg_276 = i_fu_397_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        i_0_reg_276 = ap_const_lv11_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_1_reg_287 = ap_const_lv11_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln29_fu_437_p2.read()))) {
        i_1_reg_287 = i_4_fu_443_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        i_2_reg_321 = i_7_reg_752.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        i_2_reg_321 = zext_ln42_1_reg_684.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln38_fu_474_p2.read()))) {
        i_3_reg_330 = ap_const_lv11_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln58_fu_582_p2.read()))) {
        i_3_reg_330 = i_5_fu_588_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln45_fu_554_p2.read()))) {
        i_6_reg_310 = j_reg_692.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln38_fu_474_p2.read()))) {
        i_6_reg_310 = ap_const_lv10_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        stage_0_reg_298 = ap_const_lv4_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln42_fu_522_p2.read()))) {
        stage_0_reg_298 = stage_fu_533_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        BFWeight_cos_reg_717 = W_real_q0.read();
        BFWeight_sin_reg_723 = W_imag_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln38_fu_474_p2.read()))) {
        BFWidth_reg_674 = BFWidth_fu_500_p1.read();
        lshr_ln_reg_669 = subDFTSize_fu_480_p2.read().range(10, 1);
        zext_ln40_reg_664 = zext_ln40_fu_486_p1.read();
        zext_ln42_reg_679 = zext_ln42_fu_510_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, FFTIN_V_data_0_load_A.read())) {
        FFTIN_V_data_0_payload_A = FFTIN_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, FFTIN_V_data_0_load_B.read())) {
        FFTIN_V_data_0_payload_B = FFTIN_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_data_1_load_A.read())) {
        FFTOUT_V_data_1_payload_A = tmp_data_1_fu_614_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_data_1_load_B.read())) {
        FFTOUT_V_data_1_payload_B = tmp_data_1_fu_614_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_last_V_1_load_A.read())) {
        FFTOUT_V_last_V_1_payload_A = tmp_last_V_reg_806.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_last_V_1_load_B.read())) {
        FFTOUT_V_last_V_1_payload_B = tmp_last_V_reg_806.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln45_fu_554_p2.read()))) {
        i_7_reg_752 = i_7_fu_577_p2.read();
        tempout_I_addr_2_reg_737 =  (sc_lv<10>) (sext_ln47_fu_565_p1.read());
        tempout_I_addr_3_reg_747 =  (sc_lv<10>) (sext_ln50_fu_571_p1.read());
        tempout_R_addr_2_reg_732 =  (sc_lv<10>) (sext_ln47_fu_565_p1.read());
        tempout_R_addr_3_reg_742 =  (sc_lv<10>) (sext_ln50_fu_571_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln29_reg_636 = icmp_ln29_fu_437_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln58_reg_787 = icmp_ln58_fu_582_p2.read();
        icmp_ln58_reg_787_pp2_iter1_reg = icmp_ln58_reg_787.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        j_reg_692 = j_fu_527_p2.read();
        zext_ln42_1_reg_684 = zext_ln42_1_fu_514_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln42_fu_522_p2.read()))) {
        mul_ln43_reg_697 = mul_ln43_fu_623_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln29_fu_437_p2.read()))) {
        or_ln31_8_reg_650 = or_ln31_8_fu_455_p4.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()))) {
        reg_365 = tempout_R_q0.read();
        reg_372 = tempout_I_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()))) {
        reg_379 = grp_fu_341_p2.read();
        reg_385 = grp_fu_345_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        tmp_1_reg_757 = grp_fu_349_p2.read();
        tmp_2_reg_762 = grp_fu_353_p2.read();
        tmp_3_reg_767 = grp_fu_357_p2.read();
        tmp_4_reg_772 = grp_fu_361_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        tmp_5_reg_777 = grp_fu_341_p2.read();
        tmp_6_reg_782 = grp_fu_345_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln58_fu_582_p2.read()))) {
        tmp_last_V_reg_806 = tmp_last_V_fu_600_p2.read();
    }
}

void FFTipfn::thread_BFWidth_fu_500_p1() {
    BFWidth_fu_500_p1 = esl_zext<32,10>(lshr_ln_fu_490_p4.read());
}

void FFTipfn::thread_FFTIN_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_391_p2.read()))) {
        FFTIN_TDATA_blk_n = FFTIN_V_data_0_state.read()[0];
    } else {
        FFTIN_TDATA_blk_n = ap_const_logic_1;
    }
}

void FFTipfn::thread_FFTIN_TREADY() {
    FFTIN_TREADY = FFTIN_V_keep_V_0_state.read()[1];
}

void FFTipfn::thread_FFTIN_V_data_0_ack_in() {
    FFTIN_V_data_0_ack_in = FFTIN_V_data_0_state.read()[1];
}

void FFTipfn::thread_FFTIN_V_data_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_391_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_391_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, FFTIN_V_data_0_vld_out.read())))) {
        FFTIN_V_data_0_ack_out = ap_const_logic_1;
    } else {
        FFTIN_V_data_0_ack_out = ap_const_logic_0;
    }
}

void FFTipfn::thread_FFTIN_V_data_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, FFTIN_V_data_0_sel.read())) {
        FFTIN_V_data_0_data_out = FFTIN_V_data_0_payload_B.read();
    } else {
        FFTIN_V_data_0_data_out = FFTIN_V_data_0_payload_A.read();
    }
}

void FFTipfn::thread_FFTIN_V_data_0_load_A() {
    FFTIN_V_data_0_load_A = (FFTIN_V_data_0_state_cmp_full.read() & ~FFTIN_V_data_0_sel_wr.read());
}

void FFTipfn::thread_FFTIN_V_data_0_load_B() {
    FFTIN_V_data_0_load_B = (FFTIN_V_data_0_sel_wr.read() & FFTIN_V_data_0_state_cmp_full.read());
}

void FFTipfn::thread_FFTIN_V_data_0_sel() {
    FFTIN_V_data_0_sel = FFTIN_V_data_0_sel_rd.read();
}

void FFTipfn::thread_FFTIN_V_data_0_state_cmp_full() {
    FFTIN_V_data_0_state_cmp_full =  (sc_logic) ((!FFTIN_V_data_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(FFTIN_V_data_0_state.read() != ap_const_lv2_1))[0];
}

void FFTipfn::thread_FFTIN_V_data_0_vld_in() {
    FFTIN_V_data_0_vld_in = FFTIN_TVALID.read();
}

void FFTipfn::thread_FFTIN_V_data_0_vld_out() {
    FFTIN_V_data_0_vld_out = FFTIN_V_data_0_state.read()[0];
}

void FFTipfn::thread_FFTIN_V_keep_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_391_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_391_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, FFTIN_V_data_0_vld_out.read())))) {
        FFTIN_V_keep_V_0_ack_out = ap_const_logic_1;
    } else {
        FFTIN_V_keep_V_0_ack_out = ap_const_logic_0;
    }
}

void FFTipfn::thread_FFTIN_V_keep_V_0_vld_in() {
    FFTIN_V_keep_V_0_vld_in = FFTIN_TVALID.read();
}

void FFTipfn::thread_FFTIn_I_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
        FFTIn_I_address0 =  (sc_lv<10>) (zext_ln31_fu_449_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        FFTIn_I_address0 =  (sc_lv<10>) (zext_ln24_fu_431_p1.read());
    } else {
        FFTIn_I_address0 = "XXXXXXXXXX";
    }
}

void FFTipfn::thread_FFTIn_I_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_391_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, FFTIN_V_data_0_vld_out.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read())))) {
        FFTIn_I_ce0 = ap_const_logic_1;
    } else {
        FFTIn_I_ce0 = ap_const_logic_0;
    }
}

void FFTipfn::thread_FFTIn_I_d0() {
    FFTIn_I_d0 = tmp_data_M_imag_loa_fu_416_p4.read();
}

void FFTipfn::thread_FFTIn_I_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_391_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_391_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, FFTIN_V_data_0_vld_out.read())))) {
        FFTIn_I_we0 = ap_const_logic_1;
    } else {
        FFTIn_I_we0 = ap_const_logic_0;
    }
}

void FFTipfn::thread_FFTIn_R_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
        FFTIn_R_address0 =  (sc_lv<10>) (zext_ln31_fu_449_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        FFTIn_R_address0 =  (sc_lv<10>) (zext_ln24_fu_431_p1.read());
    } else {
        FFTIn_R_address0 = "XXXXXXXXXX";
    }
}

void FFTipfn::thread_FFTIn_R_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_391_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, FFTIN_V_data_0_vld_out.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read())))) {
        FFTIn_R_ce0 = ap_const_logic_1;
    } else {
        FFTIn_R_ce0 = ap_const_logic_0;
    }
}

void FFTipfn::thread_FFTIn_R_d0() {
    FFTIn_R_d0 = trunc_ln7_fu_407_p1.read();
}

void FFTipfn::thread_FFTIn_R_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_391_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_391_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, FFTIN_V_data_0_vld_out.read())))) {
        FFTIn_R_we0 = ap_const_logic_1;
    } else {
        FFTIn_R_we0 = ap_const_logic_0;
    }
}

void FFTipfn::thread_FFTOUT_TDATA() {
    FFTOUT_TDATA = FFTOUT_V_data_1_data_out.read();
}

void FFTipfn::thread_FFTOUT_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln58_reg_787.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp2_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln58_reg_787_pp2_iter1_reg.read())))) {
        FFTOUT_TDATA_blk_n = FFTOUT_V_data_1_state.read()[1];
    } else {
        FFTOUT_TDATA_blk_n = ap_const_logic_1;
    }
}

void FFTipfn::thread_FFTOUT_TKEEP() {
    FFTOUT_TKEEP = FFTOUT_V_keep_V_1_data_out.read();
}

void FFTipfn::thread_FFTOUT_TLAST() {
    FFTOUT_TLAST = FFTOUT_V_last_V_1_data_out.read();
}

void FFTipfn::thread_FFTOUT_TVALID() {
    FFTOUT_TVALID = FFTOUT_V_keep_V_1_state.read()[0];
}

void FFTipfn::thread_FFTOUT_V_data_1_ack_in() {
    FFTOUT_V_data_1_ack_in = FFTOUT_V_data_1_state.read()[1];
}

void FFTipfn::thread_FFTOUT_V_data_1_ack_out() {
    FFTOUT_V_data_1_ack_out = FFTOUT_TREADY.read();
}

void FFTipfn::thread_FFTOUT_V_data_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_data_1_sel.read())) {
        FFTOUT_V_data_1_data_out = FFTOUT_V_data_1_payload_B.read();
    } else {
        FFTOUT_V_data_1_data_out = FFTOUT_V_data_1_payload_A.read();
    }
}

void FFTipfn::thread_FFTOUT_V_data_1_load_A() {
    FFTOUT_V_data_1_load_A = (FFTOUT_V_data_1_state_cmp_full.read() & ~FFTOUT_V_data_1_sel_wr.read());
}

void FFTipfn::thread_FFTOUT_V_data_1_load_B() {
    FFTOUT_V_data_1_load_B = (FFTOUT_V_data_1_sel_wr.read() & FFTOUT_V_data_1_state_cmp_full.read());
}

void FFTipfn::thread_FFTOUT_V_data_1_sel() {
    FFTOUT_V_data_1_sel = FFTOUT_V_data_1_sel_rd.read();
}

void FFTipfn::thread_FFTOUT_V_data_1_state_cmp_full() {
    FFTOUT_V_data_1_state_cmp_full =  (sc_logic) ((!FFTOUT_V_data_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(FFTOUT_V_data_1_state.read() != ap_const_lv2_1))[0];
}

void FFTipfn::thread_FFTOUT_V_data_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln58_reg_787.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0))) {
        FFTOUT_V_data_1_vld_in = ap_const_logic_1;
    } else {
        FFTOUT_V_data_1_vld_in = ap_const_logic_0;
    }
}

void FFTipfn::thread_FFTOUT_V_data_1_vld_out() {
    FFTOUT_V_data_1_vld_out = FFTOUT_V_data_1_state.read()[0];
}

void FFTipfn::thread_FFTOUT_V_keep_V_1_ack_out() {
    FFTOUT_V_keep_V_1_ack_out = FFTOUT_TREADY.read();
}

void FFTipfn::thread_FFTOUT_V_keep_V_1_data_out() {
    FFTOUT_V_keep_V_1_data_out = ap_const_lv8_FF;
}

void FFTipfn::thread_FFTOUT_V_keep_V_1_sel() {
    FFTOUT_V_keep_V_1_sel = FFTOUT_V_keep_V_1_sel_rd.read();
}

void FFTipfn::thread_FFTOUT_V_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln58_reg_787.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0))) {
        FFTOUT_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        FFTOUT_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void FFTipfn::thread_FFTOUT_V_keep_V_1_vld_out() {
    FFTOUT_V_keep_V_1_vld_out = FFTOUT_V_keep_V_1_state.read()[0];
}

void FFTipfn::thread_FFTOUT_V_last_V_1_ack_in() {
    FFTOUT_V_last_V_1_ack_in = FFTOUT_V_last_V_1_state.read()[1];
}

void FFTipfn::thread_FFTOUT_V_last_V_1_ack_out() {
    FFTOUT_V_last_V_1_ack_out = FFTOUT_TREADY.read();
}

void FFTipfn::thread_FFTOUT_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, FFTOUT_V_last_V_1_sel.read())) {
        FFTOUT_V_last_V_1_data_out = FFTOUT_V_last_V_1_payload_B.read();
    } else {
        FFTOUT_V_last_V_1_data_out = FFTOUT_V_last_V_1_payload_A.read();
    }
}

void FFTipfn::thread_FFTOUT_V_last_V_1_load_A() {
    FFTOUT_V_last_V_1_load_A = (FFTOUT_V_last_V_1_state_cmp_full.read() & ~FFTOUT_V_last_V_1_sel_wr.read());
}

void FFTipfn::thread_FFTOUT_V_last_V_1_load_B() {
    FFTOUT_V_last_V_1_load_B = (FFTOUT_V_last_V_1_sel_wr.read() & FFTOUT_V_last_V_1_state_cmp_full.read());
}

void FFTipfn::thread_FFTOUT_V_last_V_1_sel() {
    FFTOUT_V_last_V_1_sel = FFTOUT_V_last_V_1_sel_rd.read();
}

void FFTipfn::thread_FFTOUT_V_last_V_1_state_cmp_full() {
    FFTOUT_V_last_V_1_state_cmp_full =  (sc_logic) ((!FFTOUT_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(FFTOUT_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void FFTipfn::thread_FFTOUT_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln58_reg_787.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0))) {
        FFTOUT_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        FFTOUT_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void FFTipfn::thread_FFTOUT_V_last_V_1_vld_out() {
    FFTOUT_V_last_V_1_vld_out = FFTOUT_V_last_V_1_state.read()[0];
}

void FFTipfn::thread_W_imag_address0() {
    W_imag_address0 =  (sc_lv<9>) (zext_ln43_fu_539_p1.read());
}

void FFTipfn::thread_W_imag_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        W_imag_ce0 = ap_const_logic_1;
    } else {
        W_imag_ce0 = ap_const_logic_0;
    }
}

void FFTipfn::thread_W_real_address0() {
    W_real_address0 =  (sc_lv<9>) (zext_ln43_fu_539_p1.read());
}

void FFTipfn::thread_W_real_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        W_real_ce0 = ap_const_logic_1;
    } else {
        W_real_ce0 = ap_const_logic_0;
    }
}

void FFTipfn::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[3];
}

void FFTipfn::thread_ap_CS_fsm_pp2_stage0() {
    ap_CS_fsm_pp2_stage0 = ap_CS_fsm.read()[34];
}

void FFTipfn::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void FFTipfn::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[8];
}

void FFTipfn::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[9];
}

void FFTipfn::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[10];
}

void FFTipfn::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[11];
}

void FFTipfn::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[14];
}

void FFTipfn::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[15];
}

void FFTipfn::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void FFTipfn::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[18];
}

void FFTipfn::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[19];
}

void FFTipfn::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[20];
}

void FFTipfn::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[24];
}

void FFTipfn::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[25];
}

void FFTipfn::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[26];
}

void FFTipfn::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[27];
}

void FFTipfn::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void FFTipfn::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[28];
}

void FFTipfn::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[32];
}

void FFTipfn::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[33];
}

void FFTipfn::thread_ap_CS_fsm_state39() {
    ap_CS_fsm_state39 = ap_CS_fsm.read()[35];
}

void FFTipfn::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[4];
}

void FFTipfn::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[5];
}

void FFTipfn::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[6];
}

void FFTipfn::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[7];
}

void FFTipfn::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void FFTipfn::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void FFTipfn::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void FFTipfn::thread_ap_block_pp2_stage0() {
    ap_block_pp2_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void FFTipfn::thread_ap_block_pp2_stage0_01001() {
    ap_block_pp2_stage0_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void FFTipfn::thread_ap_block_pp2_stage0_11001() {
    ap_block_pp2_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state37_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state38_io.read())));
}

void FFTipfn::thread_ap_block_pp2_stage0_subdone() {
    ap_block_pp2_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state37_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state38_io.read())));
}

void FFTipfn::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_391_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, FFTIN_V_data_0_vld_out.read()));
}

void FFTipfn::thread_ap_block_state36_pp2_stage0_iter0() {
    ap_block_state36_pp2_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void FFTipfn::thread_ap_block_state37_io() {
    ap_block_state37_io = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln58_reg_787.read()) && esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_V_data_1_ack_in.read()));
}

void FFTipfn::thread_ap_block_state37_pp2_stage0_iter1() {
    ap_block_state37_pp2_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void FFTipfn::thread_ap_block_state38_io() {
    ap_block_state38_io = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln58_reg_787_pp2_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_V_data_1_ack_in.read()));
}

void FFTipfn::thread_ap_block_state38_pp2_stage0_iter2() {
    ap_block_state38_pp2_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void FFTipfn::thread_ap_block_state39() {
    ap_block_state39 = (esl_seteq<1,2,2>(ap_const_lv2_1, FFTOUT_V_data_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, FFTOUT_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, FFTOUT_V_keep_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, FFTOUT_V_data_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, FFTOUT_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, FFTOUT_V_keep_V_1_state.read())));
}

void FFTipfn::thread_ap_block_state4_pp1_stage0_iter0() {
    ap_block_state4_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void FFTipfn::thread_ap_block_state5_pp1_stage0_iter1() {
    ap_block_state5_pp1_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void FFTipfn::thread_ap_condition_pp1_exit_iter0_state4() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln29_fu_437_p2.read())) {
        ap_condition_pp1_exit_iter0_state4 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state4 = ap_const_logic_0;
    }
}

void FFTipfn::thread_ap_condition_pp2_exit_iter0_state36() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln58_fu_582_p2.read())) {
        ap_condition_pp2_exit_iter0_state36 = ap_const_logic_1;
    } else {
        ap_condition_pp2_exit_iter0_state36 = ap_const_logic_0;
    }
}

void FFTipfn::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void FFTipfn::thread_ap_enable_pp2() {
    ap_enable_pp2 = (ap_idle_pp2.read() ^ ap_const_logic_1);
}

void FFTipfn::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void FFTipfn::thread_ap_idle_pp2() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp2_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp2_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp2_iter2.read()))) {
        ap_idle_pp2 = ap_const_logic_1;
    } else {
        ap_idle_pp2 = ap_const_logic_0;
    }
}

void FFTipfn::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void FFTipfn::thread_bitcast_ln162_1_fu_610_p1() {
    bitcast_ln162_1_fu_610_p1 = tempout_I_q0.read();
}

void FFTipfn::thread_bitcast_ln162_fu_606_p1() {
    bitcast_ln162_fu_606_p1 = tempout_R_q0.read();
}

void FFTipfn::thread_grp_fu_341_opcode() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        grp_fu_341_opcode = ap_const_lv2_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        grp_fu_341_opcode = ap_const_lv2_0;
    } else {
        grp_fu_341_opcode =  (sc_lv<2>) ("XX");
    }
}

void FFTipfn::thread_grp_fu_341_p0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()))) {
        grp_fu_341_p0 = reg_365.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_fu_341_p0 = tmp_1_reg_757.read();
    } else {
        grp_fu_341_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void FFTipfn::thread_grp_fu_341_p1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()))) {
        grp_fu_341_p1 = reg_379.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_fu_341_p1 = tmp_2_reg_762.read();
    } else {
        grp_fu_341_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void FFTipfn::thread_grp_fu_345_opcode() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        grp_fu_345_opcode = ap_const_lv2_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()))) {
        grp_fu_345_opcode = ap_const_lv2_0;
    } else {
        grp_fu_345_opcode =  (sc_lv<2>) ("XX");
    }
}

void FFTipfn::thread_grp_fu_345_p0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()))) {
        grp_fu_345_p0 = reg_372.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_fu_345_p0 = tmp_3_reg_767.read();
    } else {
        grp_fu_345_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void FFTipfn::thread_grp_fu_345_p1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()))) {
        grp_fu_345_p1 = reg_385.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_fu_345_p1 = tmp_4_reg_772.read();
    } else {
        grp_fu_345_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void FFTipfn::thread_i_4_fu_443_p2() {
    i_4_fu_443_p2 = (!i_1_reg_287.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(i_1_reg_287.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void FFTipfn::thread_i_5_fu_588_p2() {
    i_5_fu_588_p2 = (!i_3_reg_330.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(i_3_reg_330.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void FFTipfn::thread_i_7_fu_577_p2() {
    i_7_fu_577_p2 = (!zext_ln40_reg_664.read().is_01() || !i_2_reg_321.read().is_01())? sc_lv<32>(): (sc_biguint<32>(zext_ln40_reg_664.read()) + sc_bigint<32>(i_2_reg_321.read()));
}

void FFTipfn::thread_i_fu_397_p2() {
    i_fu_397_p2 = (!i_0_reg_276.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(i_0_reg_276.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void FFTipfn::thread_i_lower_fu_560_p2() {
    i_lower_fu_560_p2 = (!i_2_reg_321.read().is_01() || !BFWidth_reg_674.read().is_01())? sc_lv<32>(): (sc_bigint<32>(i_2_reg_321.read()) + sc_biguint<32>(BFWidth_reg_674.read()));
}

void FFTipfn::thread_icmp_ln20_fu_391_p2() {
    icmp_ln20_fu_391_p2 = (!i_0_reg_276.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_276.read() == ap_const_lv11_400);
}

void FFTipfn::thread_icmp_ln29_fu_437_p2() {
    icmp_ln29_fu_437_p2 = (!i_1_reg_287.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_287.read() == ap_const_lv11_400);
}

void FFTipfn::thread_icmp_ln38_fu_474_p2() {
    icmp_ln38_fu_474_p2 = (!stage_0_reg_298.read().is_01() || !ap_const_lv4_B.is_01())? sc_lv<1>(): sc_lv<1>(stage_0_reg_298.read() == ap_const_lv4_B);
}

void FFTipfn::thread_icmp_ln42_fu_522_p2() {
    icmp_ln42_fu_522_p2 = (!i_6_reg_310.read().is_01() || !lshr_ln_reg_669.read().is_01())? sc_lv<1>(): sc_lv<1>(i_6_reg_310.read() == lshr_ln_reg_669.read());
}

void FFTipfn::thread_icmp_ln45_fu_554_p2() {
    icmp_ln45_fu_554_p2 = (!tmp_10_fu_544_p4.read().is_01() || !ap_const_lv22_1.is_01())? sc_lv<1>(): (sc_bigint<22>(tmp_10_fu_544_p4.read()) < sc_bigint<22>(ap_const_lv22_1));
}

void FFTipfn::thread_icmp_ln58_fu_582_p2() {
    icmp_ln58_fu_582_p2 = (!i_3_reg_330.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(i_3_reg_330.read() == ap_const_lv11_400);
}

void FFTipfn::thread_j_fu_527_p2() {
    j_fu_527_p2 = (!i_6_reg_310.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_6_reg_310.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void FFTipfn::thread_lshr_ln43_fu_504_p2() {
    lshr_ln43_fu_504_p2 = (!zext_ln38_fu_470_p1.read().is_01())? sc_lv<11>(): ap_const_lv11_400 >> (unsigned short)zext_ln38_fu_470_p1.read().to_uint();
}

void FFTipfn::thread_lshr_ln_fu_490_p4() {
    lshr_ln_fu_490_p4 = subDFTSize_fu_480_p2.read().range(10, 1);
}

void FFTipfn::thread_mul_ln43_fu_623_p0() {
    mul_ln43_fu_623_p0 =  (sc_lv<11>) (zext_ln42_reg_679.read());
}

void FFTipfn::thread_mul_ln43_fu_623_p1() {
    mul_ln43_fu_623_p1 =  (sc_lv<10>) (mul_ln43_fu_623_p10.read());
}

void FFTipfn::thread_mul_ln43_fu_623_p10() {
    mul_ln43_fu_623_p10 = esl_zext<21,10>(i_6_reg_310.read());
}

void FFTipfn::thread_or_ln31_8_fu_455_p4() {
    or_ln31_8_fu_455_p4 = i_1_reg_287.read().range(0, 9);
}

void FFTipfn::thread_sext_ln47_fu_565_p1() {
    sext_ln47_fu_565_p1 = esl_sext<64,32>(i_lower_fu_560_p2.read());
}

void FFTipfn::thread_sext_ln50_fu_571_p1() {
    sext_ln50_fu_571_p1 = esl_sext<64,32>(i_2_reg_321.read());
}

void FFTipfn::thread_stage_fu_533_p2() {
    stage_fu_533_p2 = (!stage_0_reg_298.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(stage_0_reg_298.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void FFTipfn::thread_subDFTSize_fu_480_p2() {
    subDFTSize_fu_480_p2 = (!zext_ln38_fu_470_p1.read().is_01())? sc_lv<11>(): ap_const_lv11_1 << (unsigned short)zext_ln38_fu_470_p1.read().to_uint();
}

void FFTipfn::thread_tempout_I_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()))) {
        tempout_I_address0 =  (sc_lv<10>) (zext_ln60_fu_594_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        tempout_I_address0 = tempout_I_addr_2_reg_737.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()))) {
        tempout_I_address0 = tempout_I_addr_3_reg_747.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        tempout_I_address0 =  (sc_lv<10>) (sext_ln47_fu_565_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        tempout_I_address0 =  (sc_lv<10>) (zext_ln31_1_fu_465_p1.read());
    } else {
        tempout_I_address0 = "XXXXXXXXXX";
    }
}

void FFTipfn::thread_tempout_I_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()))) {
        tempout_I_ce0 = ap_const_logic_1;
    } else {
        tempout_I_ce0 = ap_const_logic_0;
    }
}

void FFTipfn::thread_tempout_I_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        tempout_I_d0 = reg_385.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        tempout_I_d0 = tmp_6_reg_782.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        tempout_I_d0 = FFTIn_I_q0.read();
    } else {
        tempout_I_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void FFTipfn::thread_tempout_I_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln29_reg_636.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()))) {
        tempout_I_we0 = ap_const_logic_1;
    } else {
        tempout_I_we0 = ap_const_logic_0;
    }
}

void FFTipfn::thread_tempout_R_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()))) {
        tempout_R_address0 =  (sc_lv<10>) (zext_ln60_fu_594_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        tempout_R_address0 = tempout_R_addr_2_reg_732.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()))) {
        tempout_R_address0 = tempout_R_addr_3_reg_742.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        tempout_R_address0 =  (sc_lv<10>) (sext_ln47_fu_565_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        tempout_R_address0 =  (sc_lv<10>) (zext_ln31_1_fu_465_p1.read());
    } else {
        tempout_R_address0 = "XXXXXXXXXX";
    }
}

void FFTipfn::thread_tempout_R_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()))) {
        tempout_R_ce0 = ap_const_logic_1;
    } else {
        tempout_R_ce0 = ap_const_logic_0;
    }
}

void FFTipfn::thread_tempout_R_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        tempout_R_d0 = reg_379.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
        tempout_R_d0 = tmp_5_reg_777.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        tempout_R_d0 = FFTIn_R_q0.read();
    } else {
        tempout_R_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void FFTipfn::thread_tempout_R_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln29_reg_636.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()))) {
        tempout_R_we0 = ap_const_logic_1;
    } else {
        tempout_R_we0 = ap_const_logic_0;
    }
}

void FFTipfn::thread_tmp_10_fu_544_p4() {
    tmp_10_fu_544_p4 = i_2_reg_321.read().range(31, 10);
}

void FFTipfn::thread_tmp_data_1_fu_614_p3() {
    tmp_data_1_fu_614_p3 = esl_concat<32,32>(bitcast_ln162_1_fu_610_p1.read(), bitcast_ln162_fu_606_p1.read());
}

void FFTipfn::thread_tmp_data_M_imag_loa_fu_416_p4() {
    tmp_data_M_imag_loa_fu_416_p4 = FFTIN_V_data_0_data_out.read().range(63, 32);
}

void FFTipfn::thread_tmp_last_V_fu_600_p2() {
    tmp_last_V_fu_600_p2 = (!i_3_reg_330.read().is_01() || !ap_const_lv11_3FF.is_01())? sc_lv<1>(): sc_lv<1>(i_3_reg_330.read() == ap_const_lv11_3FF);
}

void FFTipfn::thread_trunc_ln7_fu_407_p1() {
    trunc_ln7_fu_407_p1 = FFTIN_V_data_0_data_out.read().range(32-1, 0);
}

void FFTipfn::thread_zext_ln24_fu_431_p1() {
    zext_ln24_fu_431_p1 = esl_zext<64,11>(i_0_reg_276.read());
}

void FFTipfn::thread_zext_ln31_1_fu_465_p1() {
    zext_ln31_1_fu_465_p1 = esl_zext<64,10>(or_ln31_8_reg_650.read());
}

void FFTipfn::thread_zext_ln31_fu_449_p1() {
    zext_ln31_fu_449_p1 = esl_zext<64,11>(i_1_reg_287.read());
}

void FFTipfn::thread_zext_ln38_fu_470_p1() {
    zext_ln38_fu_470_p1 = esl_zext<11,4>(stage_0_reg_298.read());
}

void FFTipfn::thread_zext_ln40_fu_486_p1() {
    zext_ln40_fu_486_p1 = esl_zext<32,11>(subDFTSize_fu_480_p2.read());
}

void FFTipfn::thread_zext_ln42_1_fu_514_p1() {
    zext_ln42_1_fu_514_p1 = esl_zext<32,10>(i_6_reg_310.read());
}

void FFTipfn::thread_zext_ln42_fu_510_p1() {
    zext_ln42_fu_510_p1 = esl_zext<21,11>(lshr_ln43_fu_504_p2.read());
}

void FFTipfn::thread_zext_ln43_fu_539_p1() {
    zext_ln43_fu_539_p1 = esl_zext<64,21>(mul_ln43_reg_697.read());
}

void FFTipfn::thread_zext_ln60_fu_594_p1() {
    zext_ln60_fu_594_p1 = esl_zext<64,11>(i_3_reg_330.read());
}

void FFTipfn::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_391_p2.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_391_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, FFTIN_V_data_0_vld_out.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln20_fu_391_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, FFTIN_V_data_0_vld_out.read())) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln20_fu_391_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            break;
        case 8 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln29_fu_437_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln29_fu_437_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln38_fu_474_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln42_fu_522_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln45_fu_554_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 17179869184 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp2_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln58_fu_582_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp2_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp2_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln58_fu_582_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp2_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state39;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            }
            break;
        case 34359738368 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state39.read()) && !(esl_seteq<1,2,2>(ap_const_lv2_1, FFTOUT_V_data_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, FFTOUT_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, FFTOUT_V_keep_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, FFTOUT_V_data_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, FFTOUT_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, FFTOUT_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, FFTOUT_V_keep_V_1_state.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state39;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<36>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void FFTipfn::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"FFTIN_TDATA\" :  \"" << FFTIN_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"FFTIN_TVALID\" :  \"" << FFTIN_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"FFTIN_TREADY\" :  \"" << FFTIN_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"FFTIN_TLAST\" :  \"" << FFTIN_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"FFTIN_TKEEP\" :  \"" << FFTIN_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"FFTOUT_TDATA\" :  \"" << FFTOUT_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"FFTOUT_TVALID\" :  \"" << FFTOUT_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"FFTOUT_TREADY\" :  \"" << FFTOUT_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"FFTOUT_TLAST\" :  \"" << FFTOUT_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"FFTOUT_TKEEP\" :  \"" << FFTOUT_TKEEP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

