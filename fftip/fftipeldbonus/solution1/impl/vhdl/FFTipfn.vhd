-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFTipfn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    FFTIN_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    FFTIN_TVALID : IN STD_LOGIC;
    FFTIN_TREADY : OUT STD_LOGIC;
    FFTIN_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    FFTIN_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    FFTOUT_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    FFTOUT_TVALID : OUT STD_LOGIC;
    FFTOUT_TREADY : IN STD_LOGIC;
    FFTOUT_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    FFTOUT_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of FFTipfn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "FFTipfn,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=17,HLS_SYN_FF=1930,HLS_SYN_LUT=3006,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000100000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000001000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000010000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000100000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (35 downto 0) := "000000000001000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (35 downto 0) := "000000000010000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (35 downto 0) := "000000000100000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (35 downto 0) := "000000001000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (35 downto 0) := "000000010000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (35 downto 0) := "000000100000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (35 downto 0) := "000001000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (35 downto 0) := "000010000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (35 downto 0) := "000100000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (35 downto 0) := "001000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (35 downto 0) := "010000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (35 downto 0) := "100000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal FFTIN_V_data_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal FFTIN_V_data_0_vld_in : STD_LOGIC;
    signal FFTIN_V_data_0_vld_out : STD_LOGIC;
    signal FFTIN_V_data_0_ack_in : STD_LOGIC;
    signal FFTIN_V_data_0_ack_out : STD_LOGIC;
    signal FFTIN_V_data_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal FFTIN_V_data_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal FFTIN_V_data_0_sel_rd : STD_LOGIC := '0';
    signal FFTIN_V_data_0_sel_wr : STD_LOGIC := '0';
    signal FFTIN_V_data_0_sel : STD_LOGIC;
    signal FFTIN_V_data_0_load_A : STD_LOGIC;
    signal FFTIN_V_data_0_load_B : STD_LOGIC;
    signal FFTIN_V_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal FFTIN_V_data_0_state_cmp_full : STD_LOGIC;
    signal FFTIN_V_keep_V_0_vld_in : STD_LOGIC;
    signal FFTIN_V_keep_V_0_ack_out : STD_LOGIC;
    signal FFTIN_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal FFTOUT_V_data_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal FFTOUT_V_data_1_vld_in : STD_LOGIC;
    signal FFTOUT_V_data_1_vld_out : STD_LOGIC;
    signal FFTOUT_V_data_1_ack_in : STD_LOGIC;
    signal FFTOUT_V_data_1_ack_out : STD_LOGIC;
    signal FFTOUT_V_data_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal FFTOUT_V_data_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal FFTOUT_V_data_1_sel_rd : STD_LOGIC := '0';
    signal FFTOUT_V_data_1_sel_wr : STD_LOGIC := '0';
    signal FFTOUT_V_data_1_sel : STD_LOGIC;
    signal FFTOUT_V_data_1_load_A : STD_LOGIC;
    signal FFTOUT_V_data_1_load_B : STD_LOGIC;
    signal FFTOUT_V_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal FFTOUT_V_data_1_state_cmp_full : STD_LOGIC;
    signal FFTOUT_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal FFTOUT_V_last_V_1_vld_in : STD_LOGIC;
    signal FFTOUT_V_last_V_1_vld_out : STD_LOGIC;
    signal FFTOUT_V_last_V_1_ack_in : STD_LOGIC;
    signal FFTOUT_V_last_V_1_ack_out : STD_LOGIC;
    signal FFTOUT_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal FFTOUT_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal FFTOUT_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal FFTOUT_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal FFTOUT_V_last_V_1_sel : STD_LOGIC;
    signal FFTOUT_V_last_V_1_load_A : STD_LOGIC;
    signal FFTOUT_V_last_V_1_load_B : STD_LOGIC;
    signal FFTOUT_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal FFTOUT_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal FFTOUT_V_keep_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal FFTOUT_V_keep_V_1_vld_in : STD_LOGIC;
    signal FFTOUT_V_keep_V_1_vld_out : STD_LOGIC;
    signal FFTOUT_V_keep_V_1_ack_out : STD_LOGIC;
    signal FFTOUT_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal FFTOUT_V_keep_V_1_sel : STD_LOGIC;
    signal FFTOUT_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal W_real_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal W_real_ce0 : STD_LOGIC;
    signal W_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_imag_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal W_imag_ce0 : STD_LOGIC;
    signal W_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFTIN_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln20_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal FFTOUT_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln58_reg_787 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal icmp_ln58_reg_787_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_287 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_3_reg_330 : STD_LOGIC_VECTOR (10 downto 0);
    signal tempout_R_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_365 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tempout_I_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_372 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_379 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_385 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_397_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal icmp_ln29_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_reg_636 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state4_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_4_fu_443_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal or_ln31_8_fu_455_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln31_8_reg_650 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln38_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln40_fu_486_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln40_reg_664 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln_fu_490_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln_reg_669 : STD_LOGIC_VECTOR (9 downto 0);
    signal BFWidth_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal BFWidth_reg_674 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln42_fu_510_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln42_reg_679 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln42_1_fu_514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln42_1_reg_684 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal j_fu_527_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_692 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln43_fu_623_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln43_reg_697 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln42_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal stage_fu_533_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal BFWeight_cos_reg_717 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal BFWeight_sin_reg_723 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempout_R_addr_2_reg_732 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln45_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tempout_I_addr_2_reg_737 : STD_LOGIC_VECTOR (9 downto 0);
    signal tempout_R_addr_3_reg_742 : STD_LOGIC_VECTOR (9 downto 0);
    signal tempout_I_addr_3_reg_747 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_7_fu_577_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_7_reg_752 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_349_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_757 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_762 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_357_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_767 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_772 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_777 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_6_reg_782 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln58_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state36_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state37_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state37_io : BOOLEAN;
    signal ap_block_state38_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state38_io : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal i_5_fu_588_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal tmp_last_V_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_806 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_1_fu_614_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state36 : STD_LOGIC;
    signal tempout_R_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tempout_R_ce0 : STD_LOGIC;
    signal tempout_R_we0 : STD_LOGIC;
    signal tempout_R_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempout_I_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tempout_I_ce0 : STD_LOGIC;
    signal tempout_I_we0 : STD_LOGIC;
    signal tempout_I_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFTIn_R_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal FFTIn_R_ce0 : STD_LOGIC;
    signal FFTIn_R_we0 : STD_LOGIC;
    signal FFTIn_R_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFTIn_R_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFTIn_I_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal FFTIn_I_ce0 : STD_LOGIC;
    signal FFTIn_I_we0 : STD_LOGIC;
    signal FFTIn_I_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFTIn_I_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_276 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal stage_0_reg_298 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_6_reg_310 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_2_reg_321 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal zext_ln24_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln31_1_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_fu_539_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln47_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln50_fu_571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln60_fu_594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_341_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_345_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_345_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal trunc_ln7_fu_407_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_M_imag_loa_fu_416_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln38_fu_470_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal subDFTSize_fu_480_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln43_fu_504_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_fu_544_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal i_lower_fu_560_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln162_1_fu_610_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln162_fu_606_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_fu_623_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln43_fu_623_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_341_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_345_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_block_state39 : BOOLEAN;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal mul_ln43_fu_623_p10 : STD_LOGIC_VECTOR (20 downto 0);

    component FFTipfn_faddfsub_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFTipfn_fmul_32nscud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFTipfn_mul_mul_1dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component FFTipfn_W_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFTipfn_W_imag IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFTipfn_tempout_R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    W_real_U : component FFTipfn_W_real
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => W_real_address0,
        ce0 => W_real_ce0,
        q0 => W_real_q0);

    W_imag_U : component FFTipfn_W_imag
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => W_imag_address0,
        ce0 => W_imag_ce0,
        q0 => W_imag_q0);

    tempout_R_U : component FFTipfn_tempout_R
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => tempout_R_address0,
        ce0 => tempout_R_ce0,
        we0 => tempout_R_we0,
        d0 => tempout_R_d0,
        q0 => tempout_R_q0);

    tempout_I_U : component FFTipfn_tempout_R
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => tempout_I_address0,
        ce0 => tempout_I_ce0,
        we0 => tempout_I_we0,
        d0 => tempout_I_d0,
        q0 => tempout_I_q0);

    FFTIn_R_U : component FFTipfn_tempout_R
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => FFTIn_R_address0,
        ce0 => FFTIn_R_ce0,
        we0 => FFTIn_R_we0,
        d0 => FFTIn_R_d0,
        q0 => FFTIn_R_q0);

    FFTIn_I_U : component FFTipfn_tempout_R
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => FFTIn_I_address0,
        ce0 => FFTIn_I_ce0,
        we0 => FFTIn_I_we0,
        d0 => FFTIn_I_d0,
        q0 => FFTIn_I_q0);

    FFTipfn_faddfsub_bkb_U1 : component FFTipfn_faddfsub_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_341_p0,
        din1 => grp_fu_341_p1,
        opcode => grp_fu_341_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_341_p2);

    FFTipfn_faddfsub_bkb_U2 : component FFTipfn_faddfsub_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_345_p0,
        din1 => grp_fu_345_p1,
        opcode => grp_fu_345_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_345_p2);

    FFTipfn_fmul_32nscud_U3 : component FFTipfn_fmul_32nscud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_365,
        din1 => BFWeight_cos_reg_717,
        ce => ap_const_logic_1,
        dout => grp_fu_349_p2);

    FFTipfn_fmul_32nscud_U4 : component FFTipfn_fmul_32nscud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_372,
        din1 => BFWeight_sin_reg_723,
        ce => ap_const_logic_1,
        dout => grp_fu_353_p2);

    FFTipfn_fmul_32nscud_U5 : component FFTipfn_fmul_32nscud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_372,
        din1 => BFWeight_cos_reg_717,
        ce => ap_const_logic_1,
        dout => grp_fu_357_p2);

    FFTipfn_fmul_32nscud_U6 : component FFTipfn_fmul_32nscud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_365,
        din1 => BFWeight_sin_reg_723,
        ce => ap_const_logic_1,
        dout => grp_fu_361_p2);

    FFTipfn_mul_mul_1dEe_U7 : component FFTipfn_mul_mul_1dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 10,
        dout_WIDTH => 21)
    port map (
        din0 => mul_ln43_fu_623_p0,
        din1 => mul_ln43_fu_623_p1,
        dout => mul_ln43_fu_623_p2);





    FFTIN_V_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                FFTIN_V_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = FFTIN_V_data_0_ack_out) and (ap_const_logic_1 = FFTIN_V_data_0_vld_out))) then 
                                        FFTIN_V_data_0_sel_rd <= not(FFTIN_V_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    FFTIN_V_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                FFTIN_V_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = FFTIN_V_data_0_ack_in) and (ap_const_logic_1 = FFTIN_V_data_0_vld_in))) then 
                                        FFTIN_V_data_0_sel_wr <= not(FFTIN_V_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    FFTIN_V_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                FFTIN_V_data_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = FFTIN_V_data_0_state) and (ap_const_logic_0 = FFTIN_V_data_0_vld_in)) or ((ap_const_lv2_3 = FFTIN_V_data_0_state) and (ap_const_logic_0 = FFTIN_V_data_0_vld_in) and (ap_const_logic_1 = FFTIN_V_data_0_ack_out)))) then 
                    FFTIN_V_data_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = FFTIN_V_data_0_state) and (ap_const_logic_0 = FFTIN_V_data_0_ack_out)) or ((ap_const_lv2_3 = FFTIN_V_data_0_state) and (ap_const_logic_0 = FFTIN_V_data_0_ack_out) and (ap_const_logic_1 = FFTIN_V_data_0_vld_in)))) then 
                    FFTIN_V_data_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = FFTIN_V_data_0_vld_in) and (ap_const_logic_1 = FFTIN_V_data_0_ack_out))) and not(((ap_const_logic_0 = FFTIN_V_data_0_ack_out) and (ap_const_logic_1 = FFTIN_V_data_0_vld_in))) and (ap_const_lv2_3 = FFTIN_V_data_0_state)) or ((ap_const_lv2_1 = FFTIN_V_data_0_state) and (ap_const_logic_1 = FFTIN_V_data_0_ack_out)) or ((ap_const_lv2_2 = FFTIN_V_data_0_state) and (ap_const_logic_1 = FFTIN_V_data_0_vld_in)))) then 
                    FFTIN_V_data_0_state <= ap_const_lv2_3;
                else 
                    FFTIN_V_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    FFTIN_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                FFTIN_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = FFTIN_V_keep_V_0_state) and (ap_const_logic_0 = FFTIN_V_keep_V_0_vld_in)) or ((ap_const_lv2_3 = FFTIN_V_keep_V_0_state) and (ap_const_logic_0 = FFTIN_V_keep_V_0_vld_in) and (ap_const_logic_1 = FFTIN_V_keep_V_0_ack_out)))) then 
                    FFTIN_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = FFTIN_V_keep_V_0_state) and (ap_const_logic_0 = FFTIN_V_keep_V_0_ack_out)) or ((ap_const_lv2_3 = FFTIN_V_keep_V_0_state) and (ap_const_logic_0 = FFTIN_V_keep_V_0_ack_out) and (ap_const_logic_1 = FFTIN_V_keep_V_0_vld_in)))) then 
                    FFTIN_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = FFTIN_V_keep_V_0_vld_in) and (ap_const_logic_1 = FFTIN_V_keep_V_0_ack_out))) and not(((ap_const_logic_0 = FFTIN_V_keep_V_0_ack_out) and (ap_const_logic_1 = FFTIN_V_keep_V_0_vld_in))) and (ap_const_lv2_3 = FFTIN_V_keep_V_0_state)) or ((ap_const_lv2_1 = FFTIN_V_keep_V_0_state) and (ap_const_logic_1 = FFTIN_V_keep_V_0_ack_out)) or ((ap_const_lv2_2 = FFTIN_V_keep_V_0_state) and (ap_const_logic_1 = FFTIN_V_keep_V_0_vld_in)))) then 
                    FFTIN_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    FFTIN_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    FFTOUT_V_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                FFTOUT_V_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = FFTOUT_V_data_1_ack_out) and (ap_const_logic_1 = FFTOUT_V_data_1_vld_out))) then 
                                        FFTOUT_V_data_1_sel_rd <= not(FFTOUT_V_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    FFTOUT_V_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                FFTOUT_V_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = FFTOUT_V_data_1_ack_in) and (ap_const_logic_1 = FFTOUT_V_data_1_vld_in))) then 
                                        FFTOUT_V_data_1_sel_wr <= not(FFTOUT_V_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    FFTOUT_V_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                FFTOUT_V_data_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = FFTOUT_V_data_1_state) and (ap_const_logic_0 = FFTOUT_V_data_1_vld_in)) or ((ap_const_lv2_3 = FFTOUT_V_data_1_state) and (ap_const_logic_0 = FFTOUT_V_data_1_vld_in) and (ap_const_logic_1 = FFTOUT_V_data_1_ack_out)))) then 
                    FFTOUT_V_data_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = FFTOUT_V_data_1_state) and (ap_const_logic_0 = FFTOUT_TREADY)) or ((ap_const_lv2_3 = FFTOUT_V_data_1_state) and (ap_const_logic_0 = FFTOUT_TREADY) and (ap_const_logic_1 = FFTOUT_V_data_1_vld_in)))) then 
                    FFTOUT_V_data_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = FFTOUT_V_data_1_vld_in) and (ap_const_logic_1 = FFTOUT_V_data_1_ack_out))) and not(((ap_const_logic_0 = FFTOUT_TREADY) and (ap_const_logic_1 = FFTOUT_V_data_1_vld_in))) and (ap_const_lv2_3 = FFTOUT_V_data_1_state)) or ((ap_const_lv2_1 = FFTOUT_V_data_1_state) and (ap_const_logic_1 = FFTOUT_V_data_1_ack_out)) or ((ap_const_lv2_2 = FFTOUT_V_data_1_state) and (ap_const_logic_1 = FFTOUT_V_data_1_vld_in)))) then 
                    FFTOUT_V_data_1_state <= ap_const_lv2_3;
                else 
                    FFTOUT_V_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    FFTOUT_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                FFTOUT_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = FFTOUT_V_keep_V_1_ack_out) and (ap_const_logic_1 = FFTOUT_V_keep_V_1_vld_out))) then 
                                        FFTOUT_V_keep_V_1_sel_rd <= not(FFTOUT_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    FFTOUT_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                FFTOUT_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = FFTOUT_V_keep_V_1_state) and (ap_const_logic_0 = FFTOUT_V_keep_V_1_vld_in)) or ((ap_const_lv2_3 = FFTOUT_V_keep_V_1_state) and (ap_const_logic_0 = FFTOUT_V_keep_V_1_vld_in) and (ap_const_logic_1 = FFTOUT_V_keep_V_1_ack_out)))) then 
                    FFTOUT_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = FFTOUT_V_keep_V_1_state) and (ap_const_logic_0 = FFTOUT_TREADY)) or ((ap_const_lv2_3 = FFTOUT_V_keep_V_1_state) and (ap_const_logic_0 = FFTOUT_TREADY) and (ap_const_logic_1 = FFTOUT_V_keep_V_1_vld_in)))) then 
                    FFTOUT_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = FFTOUT_V_keep_V_1_vld_in) and (ap_const_logic_1 = FFTOUT_V_keep_V_1_ack_out))) and not(((ap_const_logic_0 = FFTOUT_TREADY) and (ap_const_logic_1 = FFTOUT_V_keep_V_1_vld_in))) and (ap_const_lv2_3 = FFTOUT_V_keep_V_1_state)) or ((ap_const_lv2_1 = FFTOUT_V_keep_V_1_state) and (ap_const_logic_1 = FFTOUT_V_keep_V_1_ack_out)) or ((ap_const_lv2_2 = FFTOUT_V_keep_V_1_state) and (ap_const_logic_1 = FFTOUT_V_keep_V_1_vld_in)))) then 
                    FFTOUT_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    FFTOUT_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    FFTOUT_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                FFTOUT_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = FFTOUT_V_last_V_1_ack_out) and (ap_const_logic_1 = FFTOUT_V_last_V_1_vld_out))) then 
                                        FFTOUT_V_last_V_1_sel_rd <= not(FFTOUT_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    FFTOUT_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                FFTOUT_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = FFTOUT_V_last_V_1_ack_in) and (ap_const_logic_1 = FFTOUT_V_last_V_1_vld_in))) then 
                                        FFTOUT_V_last_V_1_sel_wr <= not(FFTOUT_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    FFTOUT_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                FFTOUT_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = FFTOUT_V_last_V_1_state) and (ap_const_logic_0 = FFTOUT_V_last_V_1_vld_in)) or ((ap_const_lv2_3 = FFTOUT_V_last_V_1_state) and (ap_const_logic_0 = FFTOUT_V_last_V_1_vld_in) and (ap_const_logic_1 = FFTOUT_V_last_V_1_ack_out)))) then 
                    FFTOUT_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = FFTOUT_V_last_V_1_state) and (ap_const_logic_0 = FFTOUT_TREADY)) or ((ap_const_lv2_3 = FFTOUT_V_last_V_1_state) and (ap_const_logic_0 = FFTOUT_TREADY) and (ap_const_logic_1 = FFTOUT_V_last_V_1_vld_in)))) then 
                    FFTOUT_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = FFTOUT_V_last_V_1_vld_in) and (ap_const_logic_1 = FFTOUT_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = FFTOUT_TREADY) and (ap_const_logic_1 = FFTOUT_V_last_V_1_vld_in))) and (ap_const_lv2_3 = FFTOUT_V_last_V_1_state)) or ((ap_const_lv2_1 = FFTOUT_V_last_V_1_state) and (ap_const_logic_1 = FFTOUT_V_last_V_1_ack_out)) or ((ap_const_lv2_2 = FFTOUT_V_last_V_1_state) and (ap_const_logic_1 = FFTOUT_V_last_V_1_vld_in)))) then 
                    FFTOUT_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    FFTOUT_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state36) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln38_fu_474_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state36)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state36);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((icmp_ln38_fu_474_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln20_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_0 = FFTIN_V_data_0_vld_out))) and (icmp_ln20_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_276 <= i_fu_397_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_0_reg_276 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    i_1_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_1_reg_287 <= ap_const_lv11_0;
            elsif (((icmp_ln29_fu_437_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_1_reg_287 <= i_4_fu_443_p2;
            end if; 
        end if;
    end process;

    i_2_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                i_2_reg_321 <= i_7_reg_752;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_2_reg_321 <= zext_ln42_1_reg_684;
            end if; 
        end if;
    end process;

    i_3_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_474_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_3_reg_330 <= ap_const_lv11_0;
            elsif (((icmp_ln58_fu_582_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_3_reg_330 <= i_5_fu_588_p2;
            end if; 
        end if;
    end process;

    i_6_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_554_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_6_reg_310 <= j_reg_692;
            elsif (((icmp_ln38_fu_474_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_6_reg_310 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    stage_0_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                stage_0_reg_298 <= ap_const_lv4_1;
            elsif (((icmp_ln42_fu_522_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                stage_0_reg_298 <= stage_fu_533_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                BFWeight_cos_reg_717 <= W_real_q0;
                BFWeight_sin_reg_723 <= W_imag_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_474_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    BFWidth_reg_674(9 downto 0) <= BFWidth_fu_500_p1(9 downto 0);
                lshr_ln_reg_669 <= subDFTSize_fu_480_p2(10 downto 1);
                    zext_ln40_reg_664(10 downto 0) <= zext_ln40_fu_486_p1(10 downto 0);
                    zext_ln42_reg_679(10 downto 0) <= zext_ln42_fu_510_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = FFTIN_V_data_0_load_A)) then
                FFTIN_V_data_0_payload_A <= FFTIN_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = FFTIN_V_data_0_load_B)) then
                FFTIN_V_data_0_payload_B <= FFTIN_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = FFTOUT_V_data_1_load_A)) then
                FFTOUT_V_data_1_payload_A <= tmp_data_1_fu_614_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = FFTOUT_V_data_1_load_B)) then
                FFTOUT_V_data_1_payload_B <= tmp_data_1_fu_614_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = FFTOUT_V_last_V_1_load_A)) then
                FFTOUT_V_last_V_1_payload_A <= tmp_last_V_reg_806;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = FFTOUT_V_last_V_1_load_B)) then
                FFTOUT_V_last_V_1_payload_B <= tmp_last_V_reg_806;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_554_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                i_7_reg_752 <= i_7_fu_577_p2;
                tempout_I_addr_2_reg_737 <= sext_ln47_fu_565_p1(10 - 1 downto 0);
                tempout_I_addr_3_reg_747 <= sext_ln50_fu_571_p1(10 - 1 downto 0);
                tempout_R_addr_2_reg_732 <= sext_ln47_fu_565_p1(10 - 1 downto 0);
                tempout_R_addr_3_reg_742 <= sext_ln50_fu_571_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln29_reg_636 <= icmp_ln29_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln58_reg_787 <= icmp_ln58_fu_582_p2;
                icmp_ln58_reg_787_pp2_iter1_reg <= icmp_ln58_reg_787;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                j_reg_692 <= j_fu_527_p2;
                    zext_ln42_1_reg_684(9 downto 0) <= zext_ln42_1_fu_514_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_fu_522_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                mul_ln43_reg_697 <= mul_ln43_fu_623_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_437_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                or_ln31_8_reg_650 <= or_ln31_8_fu_455_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_365 <= tempout_R_q0;
                reg_372 <= tempout_I_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state21))) then
                reg_379 <= grp_fu_341_p2;
                reg_385 <= grp_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_1_reg_757 <= grp_fu_349_p2;
                tmp_2_reg_762 <= grp_fu_353_p2;
                tmp_3_reg_767 <= grp_fu_357_p2;
                tmp_4_reg_772 <= grp_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tmp_5_reg_777 <= grp_fu_341_p2;
                tmp_6_reg_782 <= grp_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_582_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                tmp_last_V_reg_806 <= tmp_last_V_fu_600_p2;
            end if;
        end if;
    end process;
    zext_ln40_reg_664(31 downto 11) <= "000000000000000000000";
    BFWidth_reg_674(31 downto 10) <= "0000000000000000000000";
    zext_ln42_reg_679(20 downto 11) <= "0000000000";
    zext_ln42_1_reg_684(31 downto 10) <= "0000000000000000000000";

    ap_NS_fsm_assign_proc : process (FFTIN_V_data_0_vld_out, FFTOUT_TREADY, FFTOUT_V_data_1_state, FFTOUT_V_last_V_1_state, FFTOUT_V_keep_V_1_state, ap_CS_fsm, ap_CS_fsm_state2, icmp_ln20_fu_391_p2, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, icmp_ln29_fu_437_p2, ap_enable_reg_pp1_iter0, icmp_ln38_fu_474_p2, ap_CS_fsm_state7, ap_CS_fsm_state8, icmp_ln42_fu_522_p2, ap_CS_fsm_state11, icmp_ln45_fu_554_p2, icmp_ln58_fu_582_p2, ap_enable_reg_pp2_iter0, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_CS_fsm_state39)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln20_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_0 = FFTIN_V_data_0_vld_out))) and (icmp_ln20_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((icmp_ln20_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_0 = FFTIN_V_data_0_vld_out))) and (icmp_ln20_fu_391_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((icmp_ln29_fu_437_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((icmp_ln29_fu_437_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln38_fu_474_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln42_fu_522_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln45_fu_554_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((icmp_ln58_fu_582_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((icmp_ln58_fu_582_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state39 => 
                if ((not(((ap_const_lv2_1 = FFTOUT_V_keep_V_1_state) or (ap_const_lv2_1 = FFTOUT_V_last_V_1_state) or (ap_const_lv2_1 = FFTOUT_V_data_1_state) or ((ap_const_lv2_3 = FFTOUT_V_keep_V_1_state) and (ap_const_logic_0 = FFTOUT_TREADY)) or ((ap_const_lv2_3 = FFTOUT_V_last_V_1_state) and (ap_const_logic_0 = FFTOUT_TREADY)) or ((ap_const_lv2_3 = FFTOUT_V_data_1_state) and (ap_const_logic_0 = FFTOUT_TREADY)))) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    BFWidth_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_490_p4),32));

    FFTIN_TDATA_blk_n_assign_proc : process(FFTIN_V_data_0_state, ap_CS_fsm_state2, icmp_ln20_fu_391_p2)
    begin
        if (((icmp_ln20_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            FFTIN_TDATA_blk_n <= FFTIN_V_data_0_state(0);
        else 
            FFTIN_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    FFTIN_TREADY <= FFTIN_V_keep_V_0_state(1);
    FFTIN_V_data_0_ack_in <= FFTIN_V_data_0_state(1);

    FFTIN_V_data_0_ack_out_assign_proc : process(FFTIN_V_data_0_vld_out, ap_CS_fsm_state2, icmp_ln20_fu_391_p2)
    begin
        if ((not(((icmp_ln20_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_0 = FFTIN_V_data_0_vld_out))) and (icmp_ln20_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            FFTIN_V_data_0_ack_out <= ap_const_logic_1;
        else 
            FFTIN_V_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    FFTIN_V_data_0_data_out_assign_proc : process(FFTIN_V_data_0_payload_A, FFTIN_V_data_0_payload_B, FFTIN_V_data_0_sel)
    begin
        if ((ap_const_logic_1 = FFTIN_V_data_0_sel)) then 
            FFTIN_V_data_0_data_out <= FFTIN_V_data_0_payload_B;
        else 
            FFTIN_V_data_0_data_out <= FFTIN_V_data_0_payload_A;
        end if; 
    end process;

    FFTIN_V_data_0_load_A <= (not(FFTIN_V_data_0_sel_wr) and FFTIN_V_data_0_state_cmp_full);
    FFTIN_V_data_0_load_B <= (FFTIN_V_data_0_state_cmp_full and FFTIN_V_data_0_sel_wr);
    FFTIN_V_data_0_sel <= FFTIN_V_data_0_sel_rd;
    FFTIN_V_data_0_state_cmp_full <= '0' when (FFTIN_V_data_0_state = ap_const_lv2_1) else '1';
    FFTIN_V_data_0_vld_in <= FFTIN_TVALID;
    FFTIN_V_data_0_vld_out <= FFTIN_V_data_0_state(0);

    FFTIN_V_keep_V_0_ack_out_assign_proc : process(FFTIN_V_data_0_vld_out, ap_CS_fsm_state2, icmp_ln20_fu_391_p2)
    begin
        if ((not(((icmp_ln20_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_0 = FFTIN_V_data_0_vld_out))) and (icmp_ln20_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            FFTIN_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            FFTIN_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    FFTIN_V_keep_V_0_vld_in <= FFTIN_TVALID;

    FFTIn_I_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, zext_ln24_fu_431_p1, zext_ln31_fu_449_p1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            FFTIn_I_address0 <= zext_ln31_fu_449_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            FFTIn_I_address0 <= zext_ln24_fu_431_p1(10 - 1 downto 0);
        else 
            FFTIn_I_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    FFTIn_I_ce0_assign_proc : process(FFTIN_V_data_0_vld_out, ap_CS_fsm_state2, icmp_ln20_fu_391_p2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or (not(((icmp_ln20_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_0 = FFTIN_V_data_0_vld_out))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            FFTIn_I_ce0 <= ap_const_logic_1;
        else 
            FFTIn_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FFTIn_I_d0 <= tmp_data_M_imag_loa_fu_416_p4;

    FFTIn_I_we0_assign_proc : process(FFTIN_V_data_0_vld_out, ap_CS_fsm_state2, icmp_ln20_fu_391_p2)
    begin
        if ((not(((icmp_ln20_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_0 = FFTIN_V_data_0_vld_out))) and (icmp_ln20_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            FFTIn_I_we0 <= ap_const_logic_1;
        else 
            FFTIn_I_we0 <= ap_const_logic_0;
        end if; 
    end process;


    FFTIn_R_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, zext_ln24_fu_431_p1, zext_ln31_fu_449_p1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            FFTIn_R_address0 <= zext_ln31_fu_449_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            FFTIn_R_address0 <= zext_ln24_fu_431_p1(10 - 1 downto 0);
        else 
            FFTIn_R_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    FFTIn_R_ce0_assign_proc : process(FFTIN_V_data_0_vld_out, ap_CS_fsm_state2, icmp_ln20_fu_391_p2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or (not(((icmp_ln20_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_0 = FFTIN_V_data_0_vld_out))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            FFTIn_R_ce0 <= ap_const_logic_1;
        else 
            FFTIn_R_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FFTIn_R_d0 <= trunc_ln7_fu_407_p1;

    FFTIn_R_we0_assign_proc : process(FFTIN_V_data_0_vld_out, ap_CS_fsm_state2, icmp_ln20_fu_391_p2)
    begin
        if ((not(((icmp_ln20_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_0 = FFTIN_V_data_0_vld_out))) and (icmp_ln20_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            FFTIn_R_we0 <= ap_const_logic_1;
        else 
            FFTIn_R_we0 <= ap_const_logic_0;
        end if; 
    end process;

    FFTOUT_TDATA <= FFTOUT_V_data_1_data_out;

    FFTOUT_TDATA_blk_n_assign_proc : process(FFTOUT_V_data_1_state, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln58_reg_787, ap_enable_reg_pp2_iter2, icmp_ln58_reg_787_pp2_iter1_reg)
    begin
        if ((((icmp_ln58_reg_787_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((icmp_ln58_reg_787 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            FFTOUT_TDATA_blk_n <= FFTOUT_V_data_1_state(1);
        else 
            FFTOUT_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    FFTOUT_TKEEP <= FFTOUT_V_keep_V_1_data_out;
    FFTOUT_TLAST <= FFTOUT_V_last_V_1_data_out;
    FFTOUT_TVALID <= FFTOUT_V_keep_V_1_state(0);
    FFTOUT_V_data_1_ack_in <= FFTOUT_V_data_1_state(1);
    FFTOUT_V_data_1_ack_out <= FFTOUT_TREADY;

    FFTOUT_V_data_1_data_out_assign_proc : process(FFTOUT_V_data_1_payload_A, FFTOUT_V_data_1_payload_B, FFTOUT_V_data_1_sel)
    begin
        if ((ap_const_logic_1 = FFTOUT_V_data_1_sel)) then 
            FFTOUT_V_data_1_data_out <= FFTOUT_V_data_1_payload_B;
        else 
            FFTOUT_V_data_1_data_out <= FFTOUT_V_data_1_payload_A;
        end if; 
    end process;

    FFTOUT_V_data_1_load_A <= (not(FFTOUT_V_data_1_sel_wr) and FFTOUT_V_data_1_state_cmp_full);
    FFTOUT_V_data_1_load_B <= (FFTOUT_V_data_1_state_cmp_full and FFTOUT_V_data_1_sel_wr);
    FFTOUT_V_data_1_sel <= FFTOUT_V_data_1_sel_rd;
    FFTOUT_V_data_1_state_cmp_full <= '0' when (FFTOUT_V_data_1_state = ap_const_lv2_1) else '1';

    FFTOUT_V_data_1_vld_in_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln58_reg_787, ap_block_pp2_stage0_11001)
    begin
        if (((icmp_ln58_reg_787 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            FFTOUT_V_data_1_vld_in <= ap_const_logic_1;
        else 
            FFTOUT_V_data_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    FFTOUT_V_data_1_vld_out <= FFTOUT_V_data_1_state(0);
    FFTOUT_V_keep_V_1_ack_out <= FFTOUT_TREADY;
    FFTOUT_V_keep_V_1_data_out <= ap_const_lv8_FF;
    FFTOUT_V_keep_V_1_sel <= FFTOUT_V_keep_V_1_sel_rd;

    FFTOUT_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln58_reg_787, ap_block_pp2_stage0_11001)
    begin
        if (((icmp_ln58_reg_787 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            FFTOUT_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            FFTOUT_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    FFTOUT_V_keep_V_1_vld_out <= FFTOUT_V_keep_V_1_state(0);
    FFTOUT_V_last_V_1_ack_in <= FFTOUT_V_last_V_1_state(1);
    FFTOUT_V_last_V_1_ack_out <= FFTOUT_TREADY;

    FFTOUT_V_last_V_1_data_out_assign_proc : process(FFTOUT_V_last_V_1_payload_A, FFTOUT_V_last_V_1_payload_B, FFTOUT_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = FFTOUT_V_last_V_1_sel)) then 
            FFTOUT_V_last_V_1_data_out <= FFTOUT_V_last_V_1_payload_B;
        else 
            FFTOUT_V_last_V_1_data_out <= FFTOUT_V_last_V_1_payload_A;
        end if; 
    end process;

    FFTOUT_V_last_V_1_load_A <= (not(FFTOUT_V_last_V_1_sel_wr) and FFTOUT_V_last_V_1_state_cmp_full);
    FFTOUT_V_last_V_1_load_B <= (FFTOUT_V_last_V_1_state_cmp_full and FFTOUT_V_last_V_1_sel_wr);
    FFTOUT_V_last_V_1_sel <= FFTOUT_V_last_V_1_sel_rd;
    FFTOUT_V_last_V_1_state_cmp_full <= '0' when (FFTOUT_V_last_V_1_state = ap_const_lv2_1) else '1';

    FFTOUT_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln58_reg_787, ap_block_pp2_stage0_11001)
    begin
        if (((icmp_ln58_reg_787 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            FFTOUT_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            FFTOUT_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    FFTOUT_V_last_V_1_vld_out <= FFTOUT_V_last_V_1_state(0);
    W_imag_address0 <= zext_ln43_fu_539_p1(9 - 1 downto 0);

    W_imag_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            W_imag_ce0 <= ap_const_logic_1;
        else 
            W_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_real_address0 <= zext_ln43_fu_539_p1(9 - 1 downto 0);

    W_real_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            W_real_ce0 <= ap_const_logic_1;
        else 
            W_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(34);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(18);
    ap_CS_fsm_state21 <= ap_CS_fsm(19);
    ap_CS_fsm_state22 <= ap_CS_fsm(20);
    ap_CS_fsm_state26 <= ap_CS_fsm(24);
    ap_CS_fsm_state27 <= ap_CS_fsm(25);
    ap_CS_fsm_state28 <= ap_CS_fsm(26);
    ap_CS_fsm_state29 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(28);
    ap_CS_fsm_state34 <= ap_CS_fsm(32);
    ap_CS_fsm_state35 <= ap_CS_fsm(33);
    ap_CS_fsm_state39 <= ap_CS_fsm(35);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_block_state37_io, ap_block_state38_io)
    begin
                ap_block_pp2_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state38_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state37_io) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_block_state37_io, ap_block_state38_io)
    begin
                ap_block_pp2_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state38_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state37_io) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state2_assign_proc : process(FFTIN_V_data_0_vld_out, icmp_ln20_fu_391_p2)
    begin
                ap_block_state2 <= ((icmp_ln20_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_0 = FFTIN_V_data_0_vld_out));
    end process;

        ap_block_state36_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state37_io_assign_proc : process(FFTOUT_V_data_1_ack_in, icmp_ln58_reg_787)
    begin
                ap_block_state37_io <= ((icmp_ln58_reg_787 = ap_const_lv1_0) and (ap_const_logic_0 = FFTOUT_V_data_1_ack_in));
    end process;

        ap_block_state37_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state38_io_assign_proc : process(FFTOUT_V_data_1_ack_in, icmp_ln58_reg_787_pp2_iter1_reg)
    begin
                ap_block_state38_io <= ((icmp_ln58_reg_787_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = FFTOUT_V_data_1_ack_in));
    end process;

        ap_block_state38_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state39_assign_proc : process(FFTOUT_TREADY, FFTOUT_V_data_1_state, FFTOUT_V_last_V_1_state, FFTOUT_V_keep_V_1_state)
    begin
                ap_block_state39 <= ((ap_const_lv2_1 = FFTOUT_V_keep_V_1_state) or (ap_const_lv2_1 = FFTOUT_V_last_V_1_state) or (ap_const_lv2_1 = FFTOUT_V_data_1_state) or ((ap_const_lv2_3 = FFTOUT_V_keep_V_1_state) and (ap_const_logic_0 = FFTOUT_TREADY)) or ((ap_const_lv2_3 = FFTOUT_V_last_V_1_state) and (ap_const_logic_0 = FFTOUT_TREADY)) or ((ap_const_lv2_3 = FFTOUT_V_data_1_state) and (ap_const_logic_0 = FFTOUT_TREADY)));
    end process;

        ap_block_state4_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state4_assign_proc : process(icmp_ln29_fu_437_p2)
    begin
        if ((icmp_ln29_fu_437_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state36_assign_proc : process(icmp_ln58_fu_582_p2)
    begin
        if ((icmp_ln58_fu_582_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state36 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state36 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln162_1_fu_610_p1 <= tempout_I_q0;
    bitcast_ln162_fu_606_p1 <= tempout_R_q0;

    grp_fu_341_opcode_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_341_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_341_opcode <= ap_const_lv2_0;
        else 
            grp_fu_341_opcode <= "XX";
        end if; 
    end process;


    grp_fu_341_p0_assign_proc : process(reg_365, tmp_1_reg_757, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_341_p0 <= reg_365;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_341_p0 <= tmp_1_reg_757;
        else 
            grp_fu_341_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_341_p1_assign_proc : process(reg_379, tmp_2_reg_762, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_341_p1 <= reg_379;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_341_p1 <= tmp_2_reg_762;
        else 
            grp_fu_341_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_345_opcode_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_345_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_345_opcode <= ap_const_lv2_0;
        else 
            grp_fu_345_opcode <= "XX";
        end if; 
    end process;


    grp_fu_345_p0_assign_proc : process(reg_372, tmp_3_reg_767, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_345_p0 <= reg_372;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_345_p0 <= tmp_3_reg_767;
        else 
            grp_fu_345_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_345_p1_assign_proc : process(reg_385, tmp_4_reg_772, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_345_p1 <= reg_385;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_345_p1 <= tmp_4_reg_772;
        else 
            grp_fu_345_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_4_fu_443_p2 <= std_logic_vector(unsigned(i_1_reg_287) + unsigned(ap_const_lv11_1));
    i_5_fu_588_p2 <= std_logic_vector(unsigned(i_3_reg_330) + unsigned(ap_const_lv11_1));
    i_7_fu_577_p2 <= std_logic_vector(unsigned(zext_ln40_reg_664) + unsigned(i_2_reg_321));
    i_fu_397_p2 <= std_logic_vector(unsigned(i_0_reg_276) + unsigned(ap_const_lv11_1));
    i_lower_fu_560_p2 <= std_logic_vector(signed(i_2_reg_321) + signed(BFWidth_reg_674));
    icmp_ln20_fu_391_p2 <= "1" when (i_0_reg_276 = ap_const_lv11_400) else "0";
    icmp_ln29_fu_437_p2 <= "1" when (i_1_reg_287 = ap_const_lv11_400) else "0";
    icmp_ln38_fu_474_p2 <= "1" when (stage_0_reg_298 = ap_const_lv4_B) else "0";
    icmp_ln42_fu_522_p2 <= "1" when (i_6_reg_310 = lshr_ln_reg_669) else "0";
    icmp_ln45_fu_554_p2 <= "1" when (signed(tmp_10_fu_544_p4) < signed(ap_const_lv22_1)) else "0";
    icmp_ln58_fu_582_p2 <= "1" when (i_3_reg_330 = ap_const_lv11_400) else "0";
    j_fu_527_p2 <= std_logic_vector(unsigned(i_6_reg_310) + unsigned(ap_const_lv10_1));
    lshr_ln43_fu_504_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv11_400),to_integer(unsigned('0' & zext_ln38_fu_470_p1(11-1 downto 0)))));
    lshr_ln_fu_490_p4 <= subDFTSize_fu_480_p2(10 downto 1);
    mul_ln43_fu_623_p0 <= zext_ln42_reg_679(11 - 1 downto 0);
    mul_ln43_fu_623_p1 <= mul_ln43_fu_623_p10(10 - 1 downto 0);
    mul_ln43_fu_623_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_310),21));
    
    or_ln31_8_fu_455_p4_proc : process(i_1_reg_287)
    variable vlo_cpy : STD_LOGIC_VECTOR(11+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(11+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(11 - 1 downto 0);
    variable or_ln31_8_fu_455_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(11 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(11 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(11 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_9(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := i_1_reg_287;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(11-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(11-1-unsigned(ap_const_lv32_9(4-1 downto 0)));
            for or_ln31_8_fu_455_p4_i in 0 to 11-1 loop
                v0_cpy(or_ln31_8_fu_455_p4_i) := i_1_reg_287(11-1-or_ln31_8_fu_455_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(11-1 downto 0)))));
        res_mask := res_mask(11-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        or_ln31_8_fu_455_p4 <= resvalue(10-1 downto 0);
    end process;

        sext_ln47_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_lower_fu_560_p2),64));

        sext_ln50_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_2_reg_321),64));

    stage_fu_533_p2 <= std_logic_vector(unsigned(stage_0_reg_298) + unsigned(ap_const_lv4_1));
    subDFTSize_fu_480_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv11_1),to_integer(unsigned('0' & zext_ln38_fu_470_p1(11-1 downto 0)))));

    tempout_I_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state11, tempout_I_addr_2_reg_737, tempout_I_addr_3_reg_747, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state35, ap_block_pp1_stage0, zext_ln31_1_fu_465_p1, sext_ln47_fu_565_p1, zext_ln60_fu_594_p1, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            tempout_I_address0 <= zext_ln60_fu_594_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            tempout_I_address0 <= tempout_I_addr_2_reg_737;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            tempout_I_address0 <= tempout_I_addr_3_reg_747;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            tempout_I_address0 <= sext_ln47_fu_565_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            tempout_I_address0 <= zext_ln31_1_fu_465_p1(10 - 1 downto 0);
        else 
            tempout_I_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    tempout_I_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state11, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state35, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            tempout_I_ce0 <= ap_const_logic_1;
        else 
            tempout_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tempout_I_d0_assign_proc : process(reg_385, ap_CS_fsm_pp1_stage0, tmp_6_reg_782, ap_enable_reg_pp1_iter1, FFTIn_I_q0, ap_CS_fsm_state35, ap_block_pp1_stage0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            tempout_I_d0 <= reg_385;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            tempout_I_d0 <= tmp_6_reg_782;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            tempout_I_d0 <= FFTIn_I_q0;
        else 
            tempout_I_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tempout_I_we0_assign_proc : process(icmp_ln29_reg_636, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_state35, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state35) or ((icmp_ln29_reg_636 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            tempout_I_we0 <= ap_const_logic_1;
        else 
            tempout_I_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tempout_R_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, ap_CS_fsm_pp1_stage0, tempout_R_addr_2_reg_732, ap_CS_fsm_state11, tempout_R_addr_3_reg_742, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state35, ap_block_pp1_stage0, zext_ln31_1_fu_465_p1, sext_ln47_fu_565_p1, zext_ln60_fu_594_p1, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            tempout_R_address0 <= zext_ln60_fu_594_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            tempout_R_address0 <= tempout_R_addr_2_reg_732;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            tempout_R_address0 <= tempout_R_addr_3_reg_742;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            tempout_R_address0 <= sext_ln47_fu_565_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            tempout_R_address0 <= zext_ln31_1_fu_465_p1(10 - 1 downto 0);
        else 
            tempout_R_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    tempout_R_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state11, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state35, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            tempout_R_ce0 <= ap_const_logic_1;
        else 
            tempout_R_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tempout_R_d0_assign_proc : process(reg_379, ap_CS_fsm_pp1_stage0, tmp_5_reg_777, ap_enable_reg_pp1_iter1, FFTIn_R_q0, ap_CS_fsm_state35, ap_block_pp1_stage0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            tempout_R_d0 <= reg_379;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            tempout_R_d0 <= tmp_5_reg_777;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            tempout_R_d0 <= FFTIn_R_q0;
        else 
            tempout_R_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tempout_R_we0_assign_proc : process(icmp_ln29_reg_636, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_state35, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state35) or ((icmp_ln29_reg_636 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            tempout_R_we0 <= ap_const_logic_1;
        else 
            tempout_R_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_544_p4 <= i_2_reg_321(31 downto 10);
    tmp_data_1_fu_614_p3 <= (bitcast_ln162_1_fu_610_p1 & bitcast_ln162_fu_606_p1);
    tmp_data_M_imag_loa_fu_416_p4 <= FFTIN_V_data_0_data_out(63 downto 32);
    tmp_last_V_fu_600_p2 <= "1" when (i_3_reg_330 = ap_const_lv11_3FF) else "0";
    trunc_ln7_fu_407_p1 <= FFTIN_V_data_0_data_out(32 - 1 downto 0);
    zext_ln24_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_276),64));
    zext_ln31_1_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln31_8_reg_650),64));
    zext_ln31_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_287),64));
    zext_ln38_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stage_0_reg_298),11));
    zext_ln40_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(subDFTSize_fu_480_p2),32));
    zext_ln42_1_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_310),32));
    zext_ln42_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln43_fu_504_p2),21));
    zext_ln43_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln43_reg_697),64));
    zext_ln60_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_330),64));
end behav;
